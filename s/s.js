private = require('./private');uptime = new Date();uptime = uptime.getFullYear() + '-' + ('0' + (uptime.getMonth() + 1)).slice(-2) + '-' + ('0' + uptime.getDate()).slice(-2)+' '+uptime.toLocaleTimeString();initTurnirs = false;app_id = private.app_id; secret = private.vk_secret;token = ''; var fs = require('fs'); server = require('https').createServer({key: fs.readFileSync('/etc/nginx/orange-maker.key'), cert: fs.readFileSync('/etc/nginx/orange-maker.crt')}).listen(80);https = require('https');microtime = require('/usr/lib/node_modules/microtime');io = require('/usr/lib/node_modules/socket.io').listen(server, {'transports': ['websocket', 'polling']});client = require('/usr/lib/node_modules/mysql');md5 = require('crypto');mysql = client.createConnection({user: private.db_user, password: private.db_pass, database: "planes2"});chat = [];logs = [];logNum = 0;mysql.on('error', function(err){	console.log({type: 'criticalError', error: err});});//клонирование объектаfunction clone(obj, level){    if(!obj || typeof obj !== 'object'){        return obj;    }       var c = (typeof obj.pop === 'function') ? [] : {};    var p, v;        for(p in obj){        if(obj.hasOwnProperty(p)){            v = obj[p];            if(v && typeof v === 'object'){                c[p] = clone(v, level);            }            else{                c[p] = v;            }        }    }	var tmpb = bot(level);	c.weapons = tmpb.weapons;	c.all = tmpb.all;	c.speed = tmpb.params.speed;	c.radius = tmpb.params.radius;	c.suspension = tmpb.params.suspension;	c.damage = tmpb.params.damage;	c.rate = tmpb.params.rate;	c.range = tmpb.range;	c.plane = tmpb.plane;	c.planeMk = tmpb.planeMk;	c.planes = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];    return c;}//получение токена с ВКfunction getToken(){	var req = https.request({host: 'api.vk.com', path: '/oauth/access_token?client_id='+app_id+'&client_secret='+secret+'&grant_type=client_credentials', method: 'GET'}, function(res){		res.setEncoding('utf8');		res.on('data', function (chunk) {			chunk = JSON.parse(chunk);			token = chunk.access_token;			console.log({type: 'token', text: 'token обновлён: '+token});			mysqlquery(querys.lastToken(), function(){});		})	});	req.end();}//запрос к БДfunction mysqlquery(query, callback){	try{ 		mysql.query(query, callback);	} catch(err) {		console.log({type: 'criticalError', error: err});	}}//покупка кубаfunction buyCube(type,c){	var res = type == 'cube1'?[50,30,10,8,8,6,6,6,4,4,4,4,3,3,3,3,3,2,2,2,2,1,1,1,1,1,0,0]:[100,50,50,30,30,10,10,10,10,9,9,9,9,8,8,8,8,6,6,6,6,4,4,4,4,4,4,3,3,3];	var rndcube = function(min,max){return Math.floor(Math.random()*(max-min+1)) + min;}	var ret = [res[rndcube(0,res.length-1)],res[rndcube(0,res.length-1)],res[rndcube(0,res.length-1)],res[rndcube(0,res.length-1)],res[rndcube(0,res.length-1)]];	if(c == 0 || c == 1 || c == 3 || c == 7 || c == 15 || c == 20){		ret = [50,30,6,10,10];	}	return ret;}//цены на звездыpriceStars = {	_1: {stars: 10, bonus: 0},	_2: {stars: 50, bonus: 2},	_3: {stars: 100, bonus: 10},	_4: {stars: 300, bonus: 50},	_5: {stars: 500, bonus: 100},	_6: {stars: 1000, bonus: 250}}//определение типа покупки (не в банке)buyGroup = {	params: ['speed','suspension','radius','damage','rate'],	weapons: ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p'],	bigWeapons: ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P'],	planes: ['defaultplane','speedplane','radiusplane','suspensionplane','damageplane','nyancatplane'],	get: function(param){		if(this.params.indexOf(param) >= 0){			return ['params', param];		}		if(this.weapons.indexOf(param) >= 0){			return ['weapons', param.toUpperCase()];		}		if(this.planes.indexOf(param) >= 0){			return ['planes', param.replace('plane','')+'Plane'];		}	}}//максимальные параметрыmaxParam = {	speed: 3,	radius: 3,	suspension: 3,	damage: 3,	rate: 3,	defaultPlane: 1,	speedPlane: 1,	radiusPlane: 1,	suspensionPlane: 1,	damagePlane: 1,	nyancatPlane: 1,	A: 999, B: 999, C: 999, D: 999, E: 999, F: 999, G: 999, H: 999, I: 999, J: 999, K: 999, L: 999, M: 999, N: 999, O: 999, P: 999}//все запросы к базеquerys = {	saveGame: function(id, exit){		//сохранение результатов игры		players[id].A_P = [];		for(var i = 0; i < weapons.all.length; i++){			players[id].A_P.push(players[id].weapons[weapons.all[i]]);		}		var ret = 'UPDATE `players` SET `gas`='+players[id].gas+', `cube`='+players[id].cube+', `drain`='+players[id].drain+', `lastEnter`=NOW(), `stars`='+players[id].stars+',`rating`='+players[id].rating+',`A_P`=\''+(players[id].A_P.join(','))+'\', `medails`="'+(players[id].medails.join(','))+'", `quests`="'+(players[id].quests.join(','))+'", `wars`="'+(players[id].wars.join(','))+'", `allGas`="'+players[id].allGas+'", `level`='+players[id].level+', `levelBot`='+players[id].levelBot+', `enters`='+players[id].enters+', `tehnoTime`="'+(players[id].tehnoTime.join(","))+'", `resources`="'+players[id].resources.join(",")+'", `name`="'+players[id].fullName+'", `foto`="'+players[id].foto+'", `tehno`="'+(players[id].tehno.join(","))+'" WHERE id='+players[id].id+';'		var textLog = 'Игра сохранена: топливо: '+players[id].gas+', звёзды: '+players[id].stars+', рейтинг: '+players[id].rating+', оружие: '+(players[id].A_P.join(","))+', медали: '+(players[id].medails.join(","))+', квесты: '+(players[id].quests.join(","))+', бои: '+(players[id].wars.join(","))+', уровень ИИ: '+players[id].levelBot+', входы: '+players[id].enters+', техно время: '+(players[id].tehnoTime.join(","))+', ресурсы: '+players[id].resources.join(",")+', технологии: '+(players[id].tehno.join(","));		console.log({type: 'saveGame', text: textLog, id: players[id].id});		return ret;	},	savePlaces: function(id){		return 'UPDATE players SET `placeR` = 0, `placeW7` = 0, `placeW30` = 0 WHERE id = '+id+';';	},	saveWar: function(id1,id2){		players[id1].A_P = [];		players[id2].A_P = [];		for(var i = 0; i < weapons.all.length; i++){			players[id1].A_P.push(players[id1].weapons[weapons.all[i]]);			players[id2].A_P.push(players[id2].weapons[weapons.all[i]]);		}		return 'INSERT INTO `players`(id,gas,lastEnter,stars,rating,A_P,wars,level,win7,win30) VALUES('+players[id1].id+','+players[id1].gas+',NOW(),'+players[id1].stars+','+players[id1].rating+',"'+(players[id1].A_P.join(','))+'","'+(players[id1].wars.join(','))+'",'+players[id1].level+','+players[id1].win7+','+players[id1].win30+'), ('+players[id2].id+','+players[id2].gas+',NOW(),'+players[id2].stars+','+players[id2].rating+',"'+(players[id2].A_P.join(','))+'","'+(players[id2].wars.join(','))+'",'+players[id2].level+','+players[id2].win7+','+players[id2].win30+') ON DUPLICATE KEY UPDATE gas=values(gas),lastEnter=NOW(),stars=values(stars),rating=values(rating),A_P=values(A_P),wars=values(wars),level=values(level),win7=values(win7),win30=values(win30);';	},	saveStars: function(id){		if(players[id].id == 'computer') return 'SELECT 1;';		return 'UPDATE `players` SET `stars`='+players[id].stars+' WHERE `id` = '+players[id].id+';';	},	savePremium: function(id){		if(players[id].id == 'computer') return 'SELECT 1;';		return 'UPDATE `players` SET `premium`='+players[id].premium+' WHERE `id` = '+players[id].id+';';	},	saveParam: function(id,param){		if(players[id].id == 'computer') return 'SELECT 1;';		if(param == 'A_P'){			players[id].A_P = [];			for(var i = 0; i < weapons.all.length; i++){				players[id].A_P.push(players[id].weapons[weapons.all[i]]);			}		}		if(param = 'weaponsLevel'){			for(var i = 0; i < 8; i++){				players[id].weaponsLevel[i] = players[id].wl[weapons.weapons[i]];				console.info(players[id].wl[weapons.weapons[i]]);			}			console.info(players[id].weaponsLevel);		}		return 'UPDATE `players` SET `stars`='+players[id].stars+', `resources`=\''+(players[id].resources.join(","))+'\',`'+param+'`=\''+((typeof(players[id][param]) == 'object') ? players[id][param].join(',') : players[id][param])+'\' WHERE `id` = '+players[id].id+';';	},	saveTehno: function(id){		return 'UPDATE `players` SET `tehnoTime`="'+(players[id].tehnoTime.join(","))+'", `stars`='+players[id].stars+', `resources`="'+(players[id].resources.join(","))+'", `tehno`="'+(players[id].tehno.join(","))+'" WHERE `id` = '+players[id].id+';';	},	newPlayer: function(id,name,foto){	//создание нового игрока		return 'INSERT INTO players SET `id` = '+id+', `superPromo` = NOW()-interval 10 day, `name` = "'+name+'", `foto` = "'+foto+'", `firstEnter` = "'+Date.now()+'";'; 	},	selectPlayer: function(id){		return 'SELECT * FROM players WHERE id='+id+';';	},	selectTop100: function(){		return 'SELECT id,name,foto,rating,firstEnter,wars,medails,win7,win30,onWin7,onWin30 FROM players ORDER BY rating desc, win7 desc, win30 desc LIMIT 0,150';	},	selectWin7: function(){		return 'SELECT id,name,foto,rating,firstEnter,wars,medails,win7,win30,onWin7,onWin30 FROM players WHERE onWin7 = 1 ORDER BY win7 DESC, rating DESC';	},	selectWin30: function(){		return 'SELECT id,name,foto,rating,firstEnter,wars,medails,win7,win30,onWin7,onWin30 FROM players WHERE onWin30 = 1 ORDER BY win30 DESC, rating DESC';	},	selectFriends: function(fids){		return 'SELECT id,rating FROM players WHERE id IN ('+fids+')';	},	setBonus: function(id,bonus,stars){		if(players[players.VKid[id]].id == 'computer') return 'SELECT 1;';		return 'UPDATE `players` SET `stars`='+stars+', `bonus` = '+bonus+', `bonusDate` = NOW() WHERE `id` = '+id+';';	},	saveLog: function(){		var q = 'INSERT INTO logs(text,type,id) VALUES';		for(var i = 0; i < logs.length; i++){			q += '("'+logs[i].join('","')+'")'+((i<logs.length-1)?',':';');		}		logs.length = 0;		return q;	},	getNotif: function(){		return 'SELECT id FROM planes.players WHERE `bonusDate` < (NOW() - interval 1 day) AND bonus > 0';	},	lastToken: function(){		return 'UPDATE logs SET text = "'+token+'" WHERE type = "lastToken"';	}}//определение квестов, в т.ч. игра несколько дней подрядfunction quests(id, rating){	var retu = {type: 'medails', one: [], rating: 0, quests: players[id].quests, dayBonus: 0};	if(new Date(players[id].bonusDate).getTime() + (1000*60*60*24) < new Date().getTime()){		players[id].bonus += 1;		if(players[id].bonus > 5 || new Date(players[id].bonusDate).getTime() + (1000*60*60*24*2) < new Date().getTime()){			players[id].bonus = 1;		}		players[id].stars += players[id].bonus*3;		players[id].bonusDate = new Date();		mysqlquery(querys.setBonus(players[id].id, players[id].bonus, players[id].stars), function(err,res){});		players[id].quests[16] = (players[id].medails[16] == 0) ? players[id].bonus : 5;		retu.dayBonus = players[id].bonus;	}	if(!rating){		players[id].quests[0] = players[id].wars[0] - players[id].wars[4];		players[id].quests[1] = players[id].quests[0];		players[id].quests[2] = players[id].quests[0];		players[id].quests[3] = players[id].quests[0];		players[id].quests[4] = players[id].quests[0]; //wars				players[id].quests[5] = players[id].wars[1];		players[id].quests[6] = players[id].wars[1];		players[id].quests[7] = players[id].wars[1];		players[id].quests[8] = players[id].wars[1];		players[id].quests[9] = players[id].wars[1]; //wins				players[id].quests[12] = players[id].allGas;				players[id].quests[14] = players[id].rating;		players[id].quests[15] = players[id].rating;		var pl = 0;		for(var i = 0; i < 18; i++){			if(players[id].planes[i]) pl += 1;		}		players[id].quests[11] = pl;		for(var i = 0; i < weapons.quests.length; i++){			if(players[id].quests[i] >= weapons.quests[i] && players[id].medails[i] == 0){				players[id].medails[i] = 1;				retu.one.push(i);				switch(i){					case 0:						players[id].weapons.D += 5;					break;					case 1:						players[id].weapons.C += 50;						players[id].weapons.D += 50;					break;					case 2:						players[id].resources[3] -= 0;						players[id].resources[3] += 10;					break;					case 3:						players[id].resources[3] -= 0;						players[id].resources[3] += 15;												players[id].resources[0] -= 0;						players[id].resources[0] += 30;						players[id].resources[1] -= 0;						players[id].resources[1] += 30;						players[id].resources[2] -= 0;						players[id].resources[2] += 30;					break;					case 4:						players[id].stars += 100;						players[id].resources[3] -= 0;						players[id].resources[3] += 50;					break;					case 10:						players[id].weapons.A += 100;					break;					case 11:						players[id].resources[3] -= 0;						players[id].resources[3] += 100;					break;					case 12:						players[id].resources[3] -= 0;						players[id].resources[3] += 30;												players[id].resources[0] -= 0;						players[id].resources[0] += 50;						players[id].resources[1] -= 0;						players[id].resources[1] += 50;						players[id].resources[2] -= 0;						players[id].resources[2] += 50;					break;					case 13:						players[id].weapons.J += 20;						players[id].weapons.I += 20;					break;					case 14:						players[id].resources[3] -= 0;						players[id].resources[3] += 10;					break;					case 15:						players[id].stars += 100;						players[id].resources[0] -= 0;						players[id].resources[0] += 40;						players[id].resources[1] -= 0;						players[id].resources[1] += 40;						players[id].resources[2] -= 0;						players[id].resources[2] += 40;					break;				}			}		}	}	for(var i = 0; i <= weapons.quests.length; i++){		if(players[id].medails[i] != 0){			switch(i){				case 5:					retu.rating += 5;				break;				case 6:					retu.rating += 10;				break;				case 7:					retu.rating += 20;				break;				case 8:					retu.rating += 35;				break;				case 9:					retu.rating += 50;				break;				case 16:					retu.rating += 3;  				break;			}		}	}	retu.rating += players[id].premium;	console.log({type: 'quests', text: 'Квесты пользователя: '+retu.one.join(",")+', ежедневный бонус: '+retu.dayBonus, id: players[id].id});	retu.quests = players[id].quests;		if(players[id].placeR == 1){		players[id].stars -= 0; players[id].stars += 30;		players[id].resources[0] -= 0; players[id].resources[0] += 20;		players[id].resources[1] -= 0; players[id].resources[1] += 20;		players[id].resources[2] -= 0; players[id].resources[2] += 20;		players[id].resources[3] -= 0; players[id].resources[3] += 10;	}	else if(players[id].placeR == 2){		players[id].stars -= 0; players[id].stars += 25;		players[id].resources[0] -= 0; players[id].resources[0] += 15;		players[id].resources[1] -= 0; players[id].resources[1] += 15;		players[id].resources[2] -= 0; players[id].resources[2] += 15;		players[id].resources[3] -= 0; players[id].resources[3] += 7;	}	else if(players[id].placeR == 3){		players[id].stars -= 0; players[id].stars += 10;		players[id].resources[0] -= 0; players[id].resources[0] += 5;		players[id].resources[1] -= 0; players[id].resources[1] += 5;		players[id].resources[2] -= 0; players[id].resources[2] += 5;		players[id].resources[3] -= 0; players[id].resources[3] += 3;	}	else if(players[id].placeR >= 4 && players[id].placeR <= 10){		players[id].stars -= 0; players[id].stars += 5;		players[id].resources[0] -= 0; players[id].resources[0] += 3;		players[id].resources[1] -= 0; players[id].resources[1] += 3;		players[id].resources[2] -= 0; players[id].resources[2] += 3;		players[id].resources[3] -= 0; players[id].resources[3] += 1;	}	if(players[id].placeW7 == 1){		players[id].stars -= 0; players[id].stars += 50;		players[id].resources[0] -= 0; players[id].resources[0] += 30;		players[id].resources[1] -= 0; players[id].resources[1] += 30;		players[id].resources[2] -= 0; players[id].resources[2] += 30;		players[id].resources[3] -= 0; players[id].resources[3] += 15;	}	else if(players[id].placeW7 == 2){		players[id].stars -= 0; players[id].stars += 40;		players[id].resources[0] -= 0; players[id].resources[0] += 25;		players[id].resources[1] -= 0; players[id].resources[1] += 25;		players[id].resources[2] -= 0; players[id].resources[2] += 25;		players[id].resources[3] -= 0; players[id].resources[3] += 10;	}	else if(players[id].placeW7 == 3){		players[id].stars -= 0; players[id].stars += 15;		players[id].resources[0] -= 0; players[id].resources[0] += 10;		players[id].resources[1] -= 0; players[id].resources[1] += 10;		players[id].resources[2] -= 0; players[id].resources[2] += 10;		players[id].resources[3] -= 0; players[id].resources[3] += 5;	}	else if(players[id].placeW7 >= 4 && players[id].placeW7 <= 10){		players[id].stars -= 0; players[id].stars += 10;		players[id].resources[0] -= 0; players[id].resources[0] += 7;		players[id].resources[1] -= 0; players[id].resources[1] += 7;		players[id].resources[2] -= 0; players[id].resources[2] += 7;		players[id].resources[3] -= 0; players[id].resources[3] += 3;	}	if(players[id].placeW30 == 1){		players[id].stars -= 0; players[id].stars += 200;		players[id].resources[0] -= 0; players[id].resources[0] += 70;		players[id].resources[1] -= 0; players[id].resources[1] += 70;		players[id].resources[2] -= 0; players[id].resources[2] += 70;		players[id].resources[3] -= 0; players[id].resources[3] += 50;	}	else if(players[id].placeW30 == 2){		players[id].stars -= 0; players[id].stars += 100;		players[id].resources[0] -= 0; players[id].resources[0] += 50;		players[id].resources[1] -= 0; players[id].resources[1] += 50;		players[id].resources[2] -= 0; players[id].resources[2] += 50;		players[id].resources[3] -= 0; players[id].resources[3] += 30;	}	else if(players[id].placeW30 == 3){		players[id].stars -= 0; players[id].stars += 50;		players[id].resources[0] -= 0; players[id].resources[0] += 30;		players[id].resources[1] -= 0; players[id].resources[1] += 30;		players[id].resources[2] -= 0; players[id].resources[2] += 30;		players[id].resources[3] -= 0; players[id].resources[3] += 15;	}	else if(players[id].placeW30 >= 4 && players[id].placeW30 <= 10){		players[id].stars -= 0; players[id].stars += 20;		players[id].resources[0] -= 0; players[id].resources[0] += 10;		players[id].resources[1] -= 0; players[id].resources[1] += 10;		players[id].resources[2] -= 0; players[id].resources[2] += 10;		players[id].resources[3] -= 0; players[id].resources[3] += 7;	}	retu.turnirs = {r:players[id].placeR,w7:players[id].placeW7,w30:players[id].placeW30};	players[id].placeR = 0;	players[id].placeW7 = 0;	players[id].placeW30 = 0;		retu.resources = players[id].resources;	retu.stars = players[id].stars;	retu.weapons = [];		for(var i = 0; i < weapons.all.length; i++){		retu.weapons.push(players[id].weapons[weapons.all[i]]);	}	mysqlquery(querys.savePlaces(players[id].id), function(){});	mysqlquery(querys.saveGame(id), function(){});		return retu;}//всякие общие данныеPlayers = function(){	this.ping = function(){ 		pingTime = Date.now();		io.sockets.json.send({type: 'ping', pingTime: pingTime});		for(var p in turn.allParams){			if(!players.VKid[p] || !players[players.VKid[p]]){				var iof = turn.ids.indexOf(p);				if(iof >= 0){					turn.ids.splice(iof, 1);					turn.rating.splice(iof, 1);					turn.range.splice(iof, 1);					turn.names.splice(iof, 1);					turn.fotos.splice(iof, 1);					turn.allParams[p] = null;					io.sockets.json.send({type: 'outTurn', id: p});				}			}		}	}	this.sendOnline = function(){		if(this.online > 0 && this.lastOnline != this.online){			this.lastOnline = this.online;			io.sockets.json.send({type: 'online', online: this.online, wars: this.wars.length});			console.log({type: 'online', text: 'Онлайн: '+this.online+' / '+this.wars.length});			console.log({type: 'uptime', text: 'uptime с '+uptime});		}	}	this.sendAll = function(msg){		io.sockets.json.send(msg);	}	this.indexPlayer = function(id){		var medails = 0;		var params = 0;		var tehno = 0;		var planes = 0;		for(var i = 0; i < players[id].medails.length; i++){			medails += players[id].medails[i]-0;		}		for(var i = 0; i < players[id].planes.length; i++){			planes += players[id].planes[i]-0;		}		for(var i = 0; i < 5; i++){			tehno += players[id].tehno[i]-0;		}		params = players[id].speed+players[id].radius+players[id].suspension+players[id].damage+players[id].rate;		console.info(medails,planes,tehno,params);		return medails+planes+tehno+params;	}	this.VKid = [];	this.online = 0;	this.lastOnline = 0;	this.wars = [];}//очереди в бойTurn = function(){	this.ids = [];	this.rating = [];	this.range = [];	this.names = [];	this.fotos = [];	this.allParams = [];	this.send = function(){		return {type: 'turn', ids: turn.ids, rating: turn.rating, range: turn.range, names: turn.names, fotos: turn.fotos};	}	this.newPlayer = function(id){		if(this.ids.indexOf(players[id].id) < 0){			this.ids.push(players[id].id);			this.rating.push(players[id].rating);			this.range.push(players[id].range);			this.names.push(players[id].name);			this.fotos.push(players[id].foto);			this.allParams[players[id].id] = {				socket: id,				id: players[id].id,				rating: players[id].rating,				range: players[id].range,				name: players[id].name,				foto: players[id].foto			}			return {type: 'turn', ids: players[id].id, rating: players[id].rating, range: players[id].range, names: players[id].name, fotos: players[id].foto};		}		else{			players[id].tmpTurnOut = this.ids.indexOf(players[id].id);			this.ids.splice(players[id].tmpTurnOut, 1);			this.rating.splice(players[id].tmpTurnOut, 1);			this.range.splice(players[id].tmpTurnOut, 1);			this.names.splice(players[id].tmpTurnOut, 1);			this.fotos.splice(players[id].tmpTurnOut, 1);			this.allParams[players[id].id] = null;			this.ids.push(players[id].id);			this.rating.push(players[id].rating);			this.range.push(players[id].range);			this.names.push(players[id].name);			this.fotos.push(players[id].foto);			this.allParams[players[id].id] = {				socket: id,				id: players[id].id,				rating: players[id].rating,				range: players[id].range,				name: players[id].name,				foto: players[id].foto			}			return {type: 'turn', ids: players[id].id, rating: players[id].rating, range: players[id].range, names: players[id].name, fotos: players[id].foto};		};	}	this.outPlayer = function(id){		players[id].tmpTurnOut = this.ids.indexOf(players[id].id);		if(players[id].tmpTurnOut >= 0){			this.ids.splice(players[id].tmpTurnOut, 1);			this.rating.splice(players[id].tmpTurnOut, 1);			this.range.splice(players[id].tmpTurnOut, 1);			this.names.splice(players[id].tmpTurnOut, 1);			this.fotos.splice(players[id].tmpTurnOut, 1);			this.allParams[players[id].id] = null;			return {type: 'outTurn', id: players[id].id};		}		else return false;	}	this.getPlayer = function(id){		if(this.allParams[id]) return this.allParams[id];		else return false;	}}//турнирыTurnirs = function(){	this.turnirsTime7 = [1406200500000,1406805300000,1407410100000,1408014900000,1408619700000,1409224500000,1409829300000,1410434100000,1411038900000,1411643700000,1412248500000,1412853300000,1413458100000,1414062900000,1414667700000,1415272500000,1415877300000,1416482100000,1417086900000,1417691700000,1418296500000,1418901300000,1419506100000,1420110900000,1420715700000,1421320500000,1421925300000,1422530100000,1423134900000,1423739700000,1424344500000,1424949300000,1425554100000,1426158900000,1426763700000,1427368500000,1427973300000,1428578100000,1429182900000,1429787700000,1430392500000,1430997300000,1431602100000,1432206900000,1432811700000,1433416500000,1434021300000,1434626100000,1435230900000,1435835700000,1436440500000,1437045300000,1437650100000,1438254900000,1438859700000,1439464500000,1440069300000,1440674100000,1441278900000,1441883700000,1442488500000,1443093300000,1443698100000,1444302900000,1444907700000,1445512500000,1446117300000,1446722100000,1447326900000,1447931700000,1448536500000,1449141300000,1449746100000,1450350900000,1450955700000,1451560500000,1452165300000,1452770100000,1453374900000,1453979700000,1454584500000,1455189300000,1455794100000,1456398900000,1457003700000,1457608500000,1458213300000,1458818100000,1459422900000,1460027700000,1460632500000,1461237300000,1461842100000,1462446900000,1463051700000,1463656500000,1464261300000,1464866100000,1465470900000,1466075700000];	this.turnirsTime30 = [1405595700000,1408187700000,1410779700000,1413371700000,1415963700000,1418555700000,1421147700000,1423739700000,1426331700000,1428923700000,1431515700000,1434107700000,1436699700000,1439291700000,1441883700000,1444475700000,1447067700000,1449659700000,1452251700000,1454843700000,1457435700000,1460027700000,1462619700000,1465211700000,1467803700000,1470395700000,1472987700000,1475579700000,1478171700000,1480763700000,1483355700000,1485947700000,1488539700000,1491131700000,1493723700000,1496315700000,1498907700000,1501499700000,1504091700000,1506683700000,1509275700000,1511867700000,1514459700000,1517051700000,1519643700000,1522235700000,1524827700000,1527419700000,1530011700000,1532603700000,1535195700000,1537787700000,1540379700000,1542971700000,1545563700000,1548155700000,1550747700000,1553339700000,1555931700000,1558523700000,1561115700000,1563707700000,1566299700000,1568891700000,1571483700000,1574075700000,1576667700000,1579259700000,1581851700000,1584443700000,1587035700000,1589627700000,1592219700000,1594811700000,1597403700000,1599995700000,1602587700000,1605179700000,1607771700000,1610363700000,1612955700000,1615547700000,1618139700000,1620731700000,1623323700000,1625915700000,1628507700000,1631099700000,1633691700000,1636283700000,1638875700000,1641467700000,1644059700000,1646651700000,1649243700000,1651835700000,1654427700000,1657019700000,1659611700000,1662203700000];	for(var i = 0; i < this.turnirsTime7.length; i++){		if(Date.now() > this.turnirsTime7[i]){			logNum += 1;			this.turnirsTime7.splice(0,1);			i-=1;		}	}	for(var i = 0; i < this.turnirsTime30.length; i++){		if(Date.now() > this.turnirsTime30[i]){			this.turnirsTime30.splice(0,1);			i-=1;		}	}	this.t7 = this.turnirsTime7[0];	this.t30 = this.turnirsTime30[0];	this.rating = [];	this.ratingIds = [];	this.win7 = [];	this.win7Ids = [];	this.win30 = [];	this.win30Ids = [];		this.allRating = [];		this.getRating = function(){		turnirs.rating = [];		turnirs.ratingIds = [];		turnirs.win7 = [];		turnirs.win7Ids = [];		turnirs.win30 = [];		turnirs.win30Ids = [];				turnirs.allRating = [];		turnirs.time = Date.now();		mysqlquery(querys.selectTop100(), function(err,res){			if(!err){				turnirs.rating = res;				for(var i = 0; i < turnirs.rating.length; i++){					turnirs.ratingIds.push(turnirs.rating[i].id); 				}				for(var i = 0; i < turnirs.rating.length; i++){					turnirs.rating[i].online = players.VKid[turnirs.rating[i].id] ? 1 : 0;					turnirs.rating[i].game = Math.ceil((Date.now()-turnirs.rating[i].firstEnter)/(1000*60*60*24));					turnirs.rating[i].wars = turnirs.rating[i].wars.split(',');					turnirs.rating[i].win = turnirs.rating[i].wars[1];					turnirs.rating[i].fail = turnirs.rating[i].wars[2];					turnirs.rating[i].medails = turnirs.rating[i].medails.split(',');				}				turnirs.getWin7();			}		})	}	this.getWin7 = function(){		mysqlquery(querys.selectWin7(), function(err,res){			if(!err){				turnirs.win7 = res;				for(var i = 0; i < turnirs.win7.length; i++){					turnirs.win7Ids.push(turnirs.win7[i].id);				}				for(var i = 0; i < turnirs.win7.length; i++){					turnirs.win7[i].online = players.VKid[turnirs.win7[i].id] ? 1 : 0;					turnirs.win7[i].game = Math.ceil((Date.now()-turnirs.win7[i].firstEnter)/(1000*60*60*24));					turnirs.win7[i].wars = turnirs.win7[i].wars.split(',');					turnirs.win7[i].win = turnirs.win7[i].wars[1];					turnirs.win7[i].fail = turnirs.win7[i].wars[2];					turnirs.win7[i].medails = turnirs.win7[i].medails.split(',');				}			}			turnirs.getWin30();		})	}	this.getWin30 = function(){		mysqlquery(querys.selectWin30(), function(err,res){			if(!err){				turnirs.win30 = res;				for(var i = 0; i < turnirs.win30.length; i++){					turnirs.win30Ids.push(turnirs.win30[i].id);				}				for(var i = 0; i < turnirs.win30.length; i++){					turnirs.win30[i].online = players.VKid[turnirs.win30[i].id] ? 1 : 0;					turnirs.win30[i].game = Math.ceil((Date.now()-turnirs.win30[i].firstEnter)/(1000*60*60*24));					turnirs.win30[i].wars = turnirs.win30[i].wars.split(',');					turnirs.win30[i].win = turnirs.win30[i].wars[1];					turnirs.win30[i].fail = turnirs.win30[i].wars[2];					turnirs.win30[i].medails = turnirs.win30[i].medails.split(',');				}			}			allRatingList = {};			mysql.query('select id from players where rating > 1500 order by rating desc, level desc;', function(err,r){				for(var i = 0; i < r.length; i++){					allRatingList['_'+r[i].id] = i+1;				}				for(var i = 0; i < turnirs.win30.length; i++){					turnirs.win30[i].posWin30 = i+1;					turnirs.win30[i].posWin7 = turnirs.win7Ids.indexOf(turnirs.win30[i].id)+1 || '-';					turnirs.win30[i].posRating = allRatingList['_'+turnirs.win30[i].id] || '-';				}				for(var i = 0; i < turnirs.win7.length; i++){					turnirs.win7[i].posWin30 = turnirs.win30Ids.indexOf(turnirs.win7[i].id)+1 || '-';					turnirs.win7[i].posWin7 = i+1;					turnirs.win7[i].posRating = allRatingList['_'+turnirs.win7[i].id] || '-';				}				for(var i = 0; i < turnirs.rating.length; i++){					turnirs.rating[i].posWin30 = turnirs.win30Ids.indexOf(turnirs.rating[i].id)+1 || '-';					turnirs.rating[i].posWin7 = turnirs.win7Ids.indexOf(turnirs.rating[i].id)+1 || '-';					turnirs.rating[i].posRating = allRatingList['_'+turnirs.rating[i].id] || '-';				}				turnirs.rating.sort(function(a,b){					return a.posRating - b.posRating;				})				if(Date.now() > turnirs.t7 && Date.now() < turnirs.t30){					turnirs.turnirsTime7.splice(0,1);					turnirs.t7 = turnirs.turnirsTime7[0];					logNum += 1;					var q = 'update players set `placeR` = CASE ';					for(var i = 0; i < (turnirs.ratingIds.length >= 10 ? 10 : turnirs.ratingIds.length); i++){						if(i < (turnirs.ratingIds.length >= 10 ? 9 : turnirs.ratingIds.length-1)) q+='WHEN `id` = '+turnirs.ratingIds[i]+' THEN '+(i+1)+' '						else q+='WHEN `id` = '+turnirs.ratingIds[i]+' THEN '+(i+1)+' ELSE 0 END, placeW7 = CASE ';					}					for(var i = 0; i < (turnirs.win7Ids.length >= 10 ? 10 : turnirs.win7Ids.length); i++){						if(i < (turnirs.win7Ids.length >= 10 ? 9 : turnirs.win7Ids.length-1)) q+='WHEN `id` = '+turnirs.win7Ids[i]+' THEN '+(i+1)+' '						else q+='WHEN `id` = '+turnirs.win7Ids[i]+' THEN '+(i+1)+' ELSE 0 END WHERE `id` IN('+([].concat(turnirs.ratingIds.slice(0,10), turnirs.win7Ids.slice(0,10)).join(","))+')';					}					console.log({type: 'turnirs', text: q});					mysqlquery(q, function(err,res){						if(!err){							mysqlquery('update players set onWin7 = 0, win7 = 0 where onWin7 = 1 AND id <> 0', function(err,res){								turnirs.getRating();							})						}					})				}				else if(Date.now() > turnirs.t7 && Date.now() > turnirs.t30){					turnirs.turnirsTime7.splice(0,1);					turnirs.t7 = turnirs.turnirsTime7[0];					turnirs.turnirsTime30.splice(0,1);					turnirs.t30 = turnirs.turnirsTime30[0];					logNum += 1;					var q = 'update players set `placeR` = CASE ';					for(var i = 0; i < (turnirs.ratingIds.length >= 10 ? 10 : turnirs.ratingIds.length); i++){						if(i < (turnirs.ratingIds.length >= 10 ? 9 : turnirs.ratingIds.length-1)) q+='WHEN `id` = '+turnirs.ratingIds[i]+' THEN '+(i+1)+' '						else q+='WHEN `id` = '+turnirs.ratingIds[i]+' THEN '+(i+1)+' ELSE 0 END, placeW30 = CASE ';					}					for(var i = 0; i < (turnirs.win30Ids.length >= 10 ? 10 : turnirs.win30Ids.length); i++){						if(i < (turnirs.win30Ids.length >= 10 ? 9 : turnirs.win30Ids.length-1)) q+='WHEN `id` = '+turnirs.win30Ids[i]+' THEN '+(i+1)+' '						else q+='WHEN `id` = '+turnirs.win30Ids[i]+' THEN '+(i+1)+' ELSE 0 END, placeW7 = CASE ';					}					for(var i = 0; i < (turnirs.win7Ids.length >= 10 ? 10 : turnirs.win7Ids.length); i++){						if(i < (turnirs.win7Ids.length >= 10 ? 9 : turnirs.win7Ids.length-1)) q+='WHEN `id` = '+turnirs.win7Ids[i]+' THEN '+(i+1)+' '						else q+='WHEN `id` = '+turnirs.win7Ids[i]+' THEN '+(i+1)+' ELSE 0 END WHERE `id` IN('+([].concat(turnirs.ratingIds.slice(0,10), turnirs.win7Ids.slice(0,10), turnirs.win30Ids.slice(0,10)).join(","))+')';					}					console.log({type: 'turnirs', text: q})					mysqlquery(q, function(err,res){						if(!err){							mysqlquery('update players set onWin7 = 0, onWin30 = 0, win7 = 0, win30 = 0 where (onWin7 = 1 OR onWin30 = 1) AND id <> 0', function(err,res){								turnirs.getRating();							})						}					})				}				else if(Date.now() > turnirs.t30 && Date.now() < turnirs.t7){					turnirs.turnirsTime30.splice(0,1);					turnirs.t30 = turnirs.turnirsTime30[0];					var q = 'update players set `placeW30` = CASE ';					for(var i = 0; i < (turnirs.win30Ids.length >= 10 ? 10 : turnirs.win30Ids.length); i++){						if(i < (turnirs.win30Ids.length >= 10 ? 9 : turnirs.win30Ids.length-1)) q+='WHEN `id` = '+turnirs.win30Ids[i]+' THEN '+(i+1)+' '						else q+='WHEN `id` = '+turnirs.win30Ids[i]+' THEN '+(i+1)+' ELSE 0 END WHERE `id` IN('+(turnirs.win30Ids.slice(0,10).join(","))+')';					}					console.log({type: 'turnirs', text: q})					mysqlquery(q, function(err,res){						if(!err){							mysqlquery('update players set onWin30 = 0, win30 = 0 where onWin30 = 1 AND id <> 0', function(err,res){								turnirs.getRating();							})						}					})				}				else io.sockets.json.send(turnirs.ret());				console.log({type: 'turnirsUpdate', text: 'Рейтинг обновлён за '+(Date.now()-turnirs.time)});				console.log({type: 'uptime', text: 'uptime с '+uptime});				initTurnirs = true;			});		})	};	this.ret = function(){		return {type:'turnirs',rating:this.rating,win7:this.win7,win30:this.win30, t7:(turnirs.t7-Date.now())/1000, t30:(turnirs.t30-Date.now())/1000, update: Math.round((1000*60*20-(Date.now()-turnirs.time))/1000/60)};	}}//уровни ИИbot = function(l){	var w = {}; var b = {}; var a = {}; var p = {}; var r; var pl; var pmk;	switch(l){		case 0:			w = {A: 100, B: 0, C: 0, D: 0, E: 0, F: 0, G: 0, H: 0, I: 0, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A'];			p = {speed: 0.5, radius: 0.5, suspension: 0.5, rate: 0.3, damage: 0.5};			r = 0; pl = 'default';		break;		case 1:			w = {A: 300, B: 10, C: 0, D: 0, E: 0, F: 0, G: 0, H: 0, I: 0, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B'];			p = {speed: 0.9, radius: 0.6, suspension: 0.6, rate: 0.5, damage: 0.7};			r = 3; pl = 'default';		break;		case 2:			w = {A: 300, B: 20, C: 0, D: 0, E: 0, F: 0, G: 0, H: 0, I: 0, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B'];			p = {speed: 0.9, radius: 0.7, suspension: 0.6, rate: 0.5, damage: 0.7};			r = 3; pl = 'default';		break;		case 3:			w = {A: 300, B: 30, C: 0, D: 0, E: 0, F: 0, G: 0, H: 0, I: 0, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B'];			p = {speed: 0.9, radius: 0.8, suspension: 0.7, rate: 0.5, damage: 0.7};			r = 3; pl = 'default';		break;		case 4:			w = {A: 300, B: 30, C: 2, D: 0, E: 0, F: 0, G: 0, H: 0, I: 0, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C'];			p = {speed: 0.9, radius: 0.8, suspension: 0.7, rate: 0.5, damage: 0.8};			r = 3; pl = 'default';		break;		case 5:			w = {A: 300, B: 30, C: 2, D: 0, E: 0, F: 0, G: 0, H: 0, I: 0, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C'];			p = {speed: 0.9, radius: 0.8, suspension: 0.7, rate: 0.6, damage: 0.9};			r = 3; pl = 'default';		break;		case 6:			w = {A: 300, B: 30, C: 5, D: 0, E: 0, F: 0, G: 0, H: 0, I: 0, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C'];			p = {speed: 0.9, radius: 0.9, suspension: 0.8, rate: 0.6, damage: 0.9};			r = 3; pl = 'default';		break;		case 7:			w = {A: 300, B: 40, C: 3, D: 2, E: 0, F: 0, G: 0, H: 0, I: 0, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D'];			p = {speed: 0.9, radius: 0.9, suspension: 0.8, rate: 0.6, damage: 0.9};			r = 5; pl = 'default';		break;		case 8:			w = {A: 300, B: 40, C: 4, D: 4, E: 0, F: 0, G: 0, H: 0, I: 0, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D'];			p = {speed: 1, radius: 1, suspension: 0.9, rate: 0.6, damage: 0.9};			r = 5; pl = 'default';		break;		case 9:			w = {A: 300, B: 40, C: 5, D: 5, E: 0, F: 0, G: 0, H: 0, I: 0, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D'];			p = {speed: 1, radius: 1, suspension: 0.9, rate: 0.6, damage: 1};			r = 5; pl = 'default';		break;		case 10:			w = {A: 300, B: 50, C: 7, D: 7, E: 0, F: 0, G: 0, H: 0, I: 0, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D'];			p = {speed: 1, radius: 1, suspension: 1, rate: 0.7, damage: 1};			r = 5; pl = 'default';		break;		case 11:			w = {A: 500, B: 50, C: 10, D: 10, E: 0, F: 0, G: 0, H: 0, I: 1, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I'];			p = {speed: 1, radius: 1, suspension: 1, rate: 0.7, damage: 1};			r = 5; pl = 'default';		break;		case 12:			w = {A: 500, B: 50, C: 10, D: 10, E: 0, F: 0, G: 0, H: 0, I: 1, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I'];			p = {speed: 1, radius: 1.1, suspension: 1, rate: 0.7, damage: 1};			r = 5; pl = 'default';		break;		case 13:			w = {A: 500, B: 50, C: 10, D: 10, E: 0, F: 0, G: 0, H: 0, I: 1, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I'];			p = {speed: 1, radius: 1.1, suspension: 1.1, rate: 0.7, damage: 1};			r = 5; pl = 'default';		break;		case 14:			w = {A: 500, B: 70, C: 20, D: 10, E: 0, F: 0, G: 0, H: 0, I: 3, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I'];			p = {speed: 1.1, radius: 1.1, suspension: 1.1, rate: 0.7, damage: 1};			r = 8; pl = 'default';		break;		case 15:			w = {A: 500, B: 70, C: 20, D: 15, E: 0, F: 0, G: 0, H: 0, I: 3, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I'];			p = {speed: 1.2, radius: 1.1, suspension: 1.1, rate: 0.8, damage: 1};			r = 8; pl = 'default';		break;		case 16:			w = {A: 500, B: 70, C: 20, D: 15, E: 0, F: 0, G: 0, H: 0, I: 3, J: 0, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I'];			p = {speed: 1.2, radius: 1.2, suspension: 1.1, rate: 0.8, damage: 1};			r = 8; pl = 'default';		break;		case 17:			w = {A: 500, B: 100, C: 30, D: 15, E: 0, F: 0, G: 0, H: 0, I: 3, J: 1, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I','J'];			p = {speed: 1.2, radius: 1.2, suspension: 1.1, rate: 0.8, damage: 1.1};			r = 8; pl = 'default';		break;		case 18:			w = {A: 500, B: 100, C: 30, D: 15, E: 0, F: 0, G: 0, H: 0, I: 3, J: 1, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I','J'];			p = {speed: 1.2, radius: 1.2, suspension: 1.2, rate: 0.8, damage: 1.1};			r = 8; pl = 'default';		break;		case 19:			w = {A: 500, B: 100, C: 30, D: 20, E: 0, F: 0, G: 0, H: 0, I: 3, J: 1, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I','J'];			p = {speed: 1.2, radius: 1.2, suspension: 1.2, rate: 0.9, damage: 1.2};			r = 8; pl = 'default';		break;		case 20:			w = {A: 500, B: 100, C: 30, D: 20, E: 0, F: 0, G: 0, H: 0, I: 3, J: 3, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I','J'];			p = {speed: 1.2, radius: 1.3, suspension: 1.2, rate: 0.9, damage: 1.2};			r = 8; pl = 'default';		break;		case 21:			w = {A: 500, B: 100, C: 30, D: 25, E: 0, F: 0, G: 0, H: 0, I: 3, J: 4, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I','J'];			p = {speed: 1.3, radius: 1.3, suspension: 1.2, rate: 0.9, damage: 1.2};			r = 10; pl = 'default';		break;		case 22:			w = {A: 500, B: 100, C: 30, D: 25, E: 0, F: 0, G: 0, H: 0, I: 3, J: 4, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I','J'];			p = {speed: 1.3, radius: 1.3, suspension: 1.3, rate: 0.9, damage: 1.2};			r = 10; pl = 'default';		break;		case 23:			w = {A: 500, B: 100, C: 30, D: 25, E: 0, F: 0, G: 0, H: 0, I: 3, J: 5, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I','J'];			p = {speed: 1.3, radius: 1.3, suspension: 1.3, rate: 0.9, damage: 1.3};			r = 10; pl = 'default';		break;		case 24:			w = {A: 500, B: 100, C: 30, D: 30, E: 0, F: 0, G: 0, H: 0, I: 3, J: 5, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I','J'];			p = {speed: 1.3, radius: 1.3, suspension: 1.3, rate: 1, damage: 1.3};			r = 10; pl = 'default';		break;		case 25:			w = {A: 500, B: 100, C: 30, D: 30, E: 0, F: 0, G: 0, H: 0, I: 3, J: 5, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I','J'];			p = {speed: 1.3, radius: 1.3, suspension: 1.3, rate: 1, damage: 1.4};			r = 10; pl = 'default';		break;		case 26:			w = {A: 500, B: 100, C: 30, D: 30, E: 0, F: 0, G: 0, H: 0, I: 4, J: 5, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I','J'];			p = {speed: 1.3, radius: 1.4, suspension: 1.3, rate: 1, damage: 1.4};			r = 13; pl = 'default';		break;		case 27:			w = {A: 500, B: 100, C: 40, D: 35, E: 0, F: 0, G: 0, H: 0, I: 4, J: 5, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I','J'];			p = {speed: 1.4, radius: 1.4, suspension: 1.3, rate: 1, damage: 1.4};			r = 13; pl = 'default';		break;		case 28:			w = {A: 500, B: 150, C: 40, D: 35, E: 0, F: 0, G: 0, H: 0, I: 4, J: 5, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I','J'];			p = {speed: 1.4, radius: 1.4, suspension: 1.4, rate: 1, damage: 1.4};			r = 13; pl = 'default';		break;		case 29:			w = {A: 500, B: 150, C: 40, D: 35, E: 0, F: 0, G: 0, H: 0, I: 5, J: 5, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I','J'];			p = {speed: 1.4, radius: 1.4, suspension: 1.3, rate: 1.1, damage: 1.4};			r = 13; pl = 'default';		break;		case 30:			w = {A: 500, B: 150, C: 40, D: 40, E: 0, F: 0, G: 0, H: 0, I: 5, J: 5, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};			a = ['A','B','C','D','I','J'];			p = {speed: 1.4, radius: 1.4, suspension: 1.3, rate: 1.1, damage: 1.5};			r = 13; pl = 'default';		break;	}	pmk = Math.round(Math.random()*2);	if(l > 30){		var params = ['speed','radius','suspension','rate','damage'];		var planes = ['speed','suspension','damage','radius'];		if(l > 50){			for(var i = 0; i < l-50; i++){				planes.push('nyancat');			}		}		w = {A: 500, B: 500, C: 500, D: 500, E: l-28, F: l-28, G: l-28, H: l-28, I: l-25, J: l-25, K: 0, L: 0, M: 0, N: 0, O: 0, P: 0};		a = ['A','B','C','D','E','F','G','H','I','J'];		p = {speed: 1.4, radius: 1.4, suspension: 1.3, rate: 1.1, damage: 1.5};		for(var i = 0; i < l-30; i++){			p[params[Math.round(Math.random()*4)]] += 0.07;		}		r = Math.round(13+(l/10));		pl = planes[Math.round(Math.random()*(planes.length-1))];		pmk = Math.floor((l-30)/30);		if(pmk > 2) pmk = 2;	}	return {weapons: w, all: a, params: p, range: r, plane: pl, planeMk: pmk}}//рандомное целое числоfunction random(min,max){	if(max < min){return 0;}	else{return Math.round(Math.random()*(max - min) + min);} }//бонус на полеfunction bonus(){	for(var i = 0; i <= Math.floor(players.wars.length/10); i++){		var _rnd = random((players.wars.length-1)-(10*(i+1)), (players.wars.length-1)-(10*i));		var _x = random(20, 680);		var _y = random(80, 300);		var typeB = weapons.bon[random(0,weapons.bon.length-1)];		if(players.wars[_rnd] && players[players.wars[_rnd]._1] && players[players.wars[_rnd]._2]){			if(players[players.wars[_rnd]._1].side && players[players.wars[_rnd]._2].side){				if(players[players.wars[_rnd]._1].warBonus < 4 && players[players.wars[_rnd]._2].warBonus < 4){					players[players.wars[_rnd]._1].warBonus += 1;					players[players.wars[_rnd]._2].warBonus += 1;					io.sockets.to(players.wars[_rnd]._1).json.send({type: 'bonus', x: _x, y: _y, typeB: typeB});					io.sockets.to(players.wars[_rnd]._2).json.send({type: 'bonus', x: _x, y: _y, typeB: typeB});				}				else{									}			}		}	}}//для ведения цветных логовfunction color(str, color, bg){    var prefix = '\u001b[';    var reset = '0m';    if(typeof bg !== 'undefined' && bg!==-1)		str = prefix + '4'+(bg    % 8) +  (   bg/8>1?';1':'') + 'm' + str;    if(typeof color !== 'undefined'  && color!==-1)		str = prefix + '3'+(color % 8) +  (color/8>1?';1':'') + 'm' + str;    str = prefix + reset + str;    return str + prefix+reset;	/*-1	Цвет по умолчанию	0	Черный	1	Красный	2	Зеленый	3	Темно желтый	4	Темно синий	5	Темно фиолетовый	6	Темно голубой	7	Светло серый	8	Темно серый	9	Ярко красный	10	Ярко зеленый	11	Желтый	12	Синий	13	Фиолетовый	14	Голубой	15	Белый*/} pingTime = Date.now();//все игровые данные как в клиентеweapons = {	randDamage:function(id,wl){return (Math.random()*(this[id].maxDamage[wl] - this[id].minDamage[wl]) + this[id].minDamage[wl]).toFixed(2)-0},	quests:[10,50,100,500,1000,10,50,100,500,1000,1,18,500,1,10000,100000,5],	weapons:['A','B','C','D','E','F','G','H'],	bonuses:['I','J','K','L','M','N','O','P'],	weaponsNI:{A:true,B:true,C:true,D:true,E:true,F:true,G:true,H:true},	bonusesNI:{I:true,J:true,K:true,L:true,M:true,N:true,O:true,P:true},	all:['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P'],	planes: {'default0':0,'speed0':1,'radius0':2,'suspension0':3,'damage0':4,'nyancat0':5,	'default1':6,'speed1':7,'radius1':8,'suspension1':9,'damage1':10,'nyancat1':11,	'default2':12,'speed2':13,'radius2':14,'suspension2':15,'damage2':16,'nyancat2':17},	bon : ['apteka','silicon','star','rating','metall','apteka','rating','trotill','diamonds','apteka','metall','apteka','star','rating','trotill','star','silicon','apteka'], 	A:{WLprice: [[0,0,0,0],[5,5,5,5],[7,7,7,5]], hot:1,complect:300,minDamage:[0.3,0.4,0.5],maxDamage:[1,1.1,1.2],radius:[1,1.5,2],speed:[11,13,15],rating:100,rate:[0.1,0.1,0.1]},	B:{WLprice: [[0,0,0,0],[6,6,6,5],[8,8,8,6]], hot:2,complect:50,minDamage:[2,3,4],maxDamage:[4,4,5],radius:[6,7,9],speed:[8,9,10],rating:500,rate:[1,0.8,0.7]},	C:{WLprice: [[0,0,0,0],[7,7,7,5],[9,9,9,7]], hot:3,complect:30,minDamage:[4,5,6],maxDamage:[6,6,7],radius:[10,11,12],speed:[7,8,9],rating:700,rate:[2,1.8,1.5]},	D:{WLprice: [[0,0,0,0],[8,8,8,6],[10,10,10,8]], hot:5,complect:20,minDamage:[2,4,6],maxDamage:[8,9,10],radius:[10,10,11],speed:[6,7,8],rating:1000,rate:[3,2.7,2.5]},	E:{WLprice: [[0,0,0,0],[10,10,10,10],[20,20,20,20]], hot:7,complect:10,minDamage:[10,11,12],maxDamage:[15,16,17],radius:[10,11,12],speed:[7,8,9],rating:5000,rate:[7,6,5]},	F:{WLprice: [[0,0,0,0],[10,10,10,10],[20,20,20,20]], hot:7,complect:10,minDamage:[5,6,7],maxDamage:[10,11,12],radius:[30,31,32],speed:[8,9,10],rating:5000,rate:[7,6,5]},	G:{WLprice: [[0,0,0,0],[10,10,10,10],[20,20,20,20]], hot:7,complect:10,minDamage:[8,9,10],maxDamage:[13,14,15],radius:[1,2,3],speed:[25,26,27],rating:5000,rate:[7,6,5]},	H:{WLprice: [[0,0,0,0],[10,10,10,10],[20,20,20,20]], hot:7,complect:10,minDamage:[10,11,12],maxDamage:[15,16,17],radius:[35,36,37],speed:[7,8,9],rating:5000,rate:[7,6,5]},	I:{hot:0,complect:5,rating:1500,rate:1},	J:{hot:0,complect:5,rating:2000,rate:7},	K:{hot:0,complect:5,rating:1500,rate:20},	L:{hot:0,complect:5,rating:2000,rate:1},	M:{hot:0,complect:3,rating:10000,rate:10},	N:{hot:0,complect:3,rating:10000,rate:10},	O:{hot:0,complect:3,rating:10000,rate:10},	P:{hot:0,complect:3,rating:10000,rate:10},	fallen : {minDamage:[1000000,1000000,1000000],maxDamage:[1000000,1000000,1000000]},	kamikadze : {minDamage:1000000,maxDamage:1000000},	stock : {minDamage:10,maxDamage:10},	default: [		{speed: 0, radius: 0, suspension: 0, damage: 0, rate: 0, rating: 0, price: 0, name: 'Самолёт курсанта', weapons: ['A','B','C','D'], bonuses: ['I','J','K','L'], resources: [0,0,0,0], tehno: [1,1,1,1,1],weaponsNI: {A:true,B:true,C:true,D:true}, bonusesNI: {I:true,J:true,K:true,L:true}},		{speed: -1, radius: 2, suspension: -1, damage: 2, rate: -1, rating: 0, price: 0, name: 'Самолёт курсанта', weapons: ['A','B','C','D'], bonuses: ['I','J','K','L'], resources: [0,0,0,0], tehno: [1,1,1,1,1],weaponsNI: {A:true,B:true,C:true,D:true}, bonusesNI: {I:true,J:true,K:true,L:true}},		{speed: 2, radius: -1, suspension: 2, damage: -1, rate: -1, rating: 0, price: 0, name: 'Самолёт курсанта', weapons: ['A','B','C','D'], bonuses: ['I','J','K','L'], resources: [0,0,0,0], tehno: [1,1,1,1,1],weaponsNI: {A:true,B:true,C:true,D:true}, bonusesNI: {I:true,J:true,K:true,L:true}}	],	speed: [		{speed: 1.5, radius: 0, suspension: 0, damage: 0, rate: 0, rating: 5000, price: 100, name: 'Скоростной самолёт', weapons: ['A','B','C','D','E'], bonuses: ['I','J','K','L','M'], resources: [10,10,10,3], tehno: [1,1,1,1,1],weaponsNI: {A:true,B:true,C:true,D:true,E:true}, bonusesNI: {I:true,J:true,K:true,L:true,M:true}},		{speed: 3.5, radius: 1, suspension: 1, damage: 1, rate: 1, rating: 7000, price: 500, name: 'Скоростной самолёт', weapons: ['A','B','C','D','E','H'], bonuses: ['I','J','K','L','M'], resources: [100,100,100,30], tehno: [3,3,3,3,3],weaponsNI: {A:true,B:true,C:true,D:true,E:true,H:true}, bonusesNI: {I:true,J:true,K:true,L:true,M:true}},		{speed: 5, radius: 2, suspension: 2, damage: 2, rate: 2, rating: 12000, price: 1000, name: 'Скоростной самолёт', weapons: ['A','B','C','D','E','H'], bonuses: ['I','J','K','L','M','P'], resources: [300,300,300,100], tehno: [7,7,7,7,7],weaponsNI: {A:true,B:true,C:true,D:true,E:true,H:true}, bonusesNI: {I:true,J:true,K:true,L:true,M:true,P:true}}	],	radius: [		{speed: 0, radius: 1.5, suspension: 0, damage: 0, rate: 0, rating: 5000, price: 100, name: 'Манёвренный самолёт', weapons: ['A','B','C','D','F'], bonuses: ['I','J','K','L','N'], resources: [10,10,10,3], tehno: [1,1,1,1,1],weaponsNI: {A:true,B:true,C:true,D:true,F:true}, bonusesNI: {I:true,J:true,K:true,L:true,N:true}},		{speed: 1, radius: 3.5, suspension: 1, damage: 1, rate: 1, rating: 7000, price: 500, name: 'Манёвренный самолёт', weapons: ['A','B','C','D','F','E'], bonuses: ['I','J','K','L','N'], resources: [100,100,100,30], tehno: [3,3,3,3,3],weaponsNI: {A:true,B:true,C:true,D:true,F:true,E:true}, bonusesNI: {I:true,J:true,K:true,L:true,N:true}},		{speed: 2, radius: 5, suspension: 2, damage: 2, rate: 2, rating: 12000, price: 1000, name: 'Манёвренный самолёт', weapons: ['A','B','C','D','F','E'], bonuses: ['I','J','K','L','N','M'], resources: [300,300,300,100], tehno: [7,7,7,7,7],weaponsNI: {A:true,B:true,C:true,D:true,F:true,E:true}, bonusesNI: {I:true,J:true,K:true,L:true,N:true,M:true}}	],	suspension: [		{speed: 0, radius: 0, suspension: 1.5, damage: 0, rate: 0, rating: 5000, price: 100, name: 'Броневой самолёт', weapons: ['A','B','C','D','G'], bonuses: ['I','J','K','L','O'], resources: [10,10,10,3], tehno: [1,1,1,1,1],weaponsNI: {A:true,B:true,C:true,D:true,G:true}, bonusesNI: {I:true,J:true,K:true,L:true,O:true}},		{speed: 1, radius: 1, suspension: 3.5, damage: 1, rate: 1, rating: 7000, price: 500, name: 'Броневой самолёт', weapons: ['A','B','C','D','G','F'], bonuses: ['I','J','K','L','O'], resources: [100,100,100,30], tehno: [3,3,3,3,3],weaponsNI: {A:true,B:true,C:true,D:true,G:true,F:true}, bonusesNI: {I:true,J:true,K:true,L:true,O:true}},		{speed: 2, radius: 2, suspension: 5, damage: 2, rate: 2, rating: 12000, price: 1000, name: 'Броневой самолёт', weapons: ['A','B','C','D','G','F'], bonuses: ['I','J','K','L','O','N'], resources: [300,300,300,100], tehno: [7,7,7,7,7],weaponsNI: {A:true,B:true,C:true,D:true,G:true,F:true}, bonusesNI: {I:true,J:true,K:true,L:true,O:true,N:true}}	],	damage: [		{speed: 0, radius: 0, suspension: 0, damage: 1.5, rate: 0, rating: 5000, price: 100, name: 'Боевой самолёт', weapons: ['A','B','C','D','H'], bonuses: ['I','J','K','L','P'], resources: [10,10,10,3], tehno: [1,1,1,1,1],weaponsNI: {A:true,B:true,C:true,D:true,H:true}, bonusesNI: {I:true,J:true,K:true,L:true,P:true}},		{speed: 1, radius: 1, suspension: 1, damage: 3.5, rate: 1, rating: 7000, price: 500, name: 'Боевой самолёт', weapons: ['A','B','C','D','H','G'], bonuses: ['I','J','K','L','P'], resources: [100,100,100,30], tehno: [3,3,3,3,3],weaponsNI: {A:true,B:true,C:true,D:true,H:true,G:true}, bonusesNI: {I:true,J:true,K:true,L:true,P:true}},		{speed: 2, radius: 2, suspension: 2, damage: 5, rate: 2, rating: 12000, price: 1000, name: 'Боевой самолёт', weapons: ['A','B','C','D','H','G'], bonuses: ['I','J','K','L','P','O'], resources: [300,300,300,100], tehno: [7,7,7,7,7],weaponsNI: {A:true,B:true,C:true,D:true,H:true,G:true}, bonusesNI: {I:true,J:true,K:true,L:true,P:true,O:true}}	],	nyancat: [		{speed: 1, radius: 1, suspension: 1, damage: 1, rate: 1, rating: 7000, price: 500, name: 'Захваченный самолёт', weapons: ['A','B','C','D','E','F','G','H'], bonuses: ['I','J','K','L','M','N','O','P'], resources: [100,100,100,30], tehno: [5,5,5,5,5],weaponsNI: {A:true,B:true,C:true,D:true,E:true,F:true,G:true,H:true}, bonusesNI: {I:true,J:true,K:true,L:true,M:true,N:true,O:true,P:true}},		{speed: 2.5, radius: 2.5, suspension: 2.5, damage: 2.5, rate: 2.5, rating: 20000, price: 2000, name: 'Захваченный самолёт', weapons: ['A','B','C','D','E','F','G','H'], bonuses: ['I','J','K','L','M','N','O','P'], resources: [500,500,500,150], tehno: [7,7,7,7,7],weaponsNI: {A:true,B:true,C:true,D:true,E:true,F:true,G:true,H:true}, bonusesNI: {I:true,J:true,K:true,L:true,M:true,N:true,O:true,P:true}},		{speed: 4, radius: 4, suspension: 4, damage: 4, rate: 4, rating: 100000, price: 20000, name: 'Захваченный самолёт', weapons: ['A','B','C','D','E','F','G','H'], bonuses: ['I','J','K','L','M','N','O','P'], resources: [1000,1000,1000,300], tehno: [10,10,10,10,10],weaponsNI: {A:true,B:true,C:true,D:true,E:true,F:true,G:true,H:true}, bonusesNI: {I:true,J:true,K:true,L:true,M:true,N:true,O:true,P:true}}	]}testTime = Date.now();turnirs = new Turnirs();turnirs.getRating();players = new Players();turn = new Turn();logCritical = {'shop':true,'error':true,'criticalError':true,'buy':true,'buyError':true,'turnirs':true,'online':true,'uptime':true,'token':true,'okLog':true,'debug':true,'turnirsUpdate':true,'profiler':true};console.log = function(p){	var d = new Date();	var profilername = d.getFullYear() + '-' + ('0' + (d.getMonth() + 1)).slice(-2) + '-' + ('0' + d.getDate()).slice(-2);	d = profilername+' '+d.toLocaleTimeString();	var t = '';	p.id = p.id||0;	if(logCritical[p.type]){		switch(p.type){			case 'shop':				if(p.pp == 'start') t = 'старт покупки '+p.item				else if(p.pp == 'ok') t = 'завершение покупки '+p.item+', транзакция '+p.order				else if(p.pp == 'fail') t = 'ошибка покупки '+p.item				else if(p.pp == 'cancel') t = 'отмена покупки '+p.item;				console.info(color(d+' '+t, 10));				fs.appendFile('../logs/shop'+logNum+'.csv', d+'^'+p.id+'^shop^'+t+'\n', function(){});			break;			case 'error':				console.info(color(d+' '+p.text, 9));				fs.appendFile('../logs/error'+logNum+'.csv', d+'^'+p.id+'^error ^'+p.text+'\n', function(){});			break;			case 'criticalError':				console.info(color(d+' '+p.text, 1));				fs.appendFile('../logs/error'+logNum+'.csv', d+'^'+p.id+'^criticalError ^'+p.text+'\n', function(){});			break;			case 'buy':				console.info(color(d+' '+p.text, 3));				fs.appendFile('../logs/buy'+logNum+'.csv', d+'^'+p.id+'^buy^'+p.text+'\n', function(){});			break;			case 'buyError':				console.info(color(d+' '+p.text, 13));				fs.appendFile('../logs/buy'+logNum+'.csv', d+'^'+p.id+'^buyError^'+p.text+'\n', function(){});			break;			case 'turnirs':				fs.appendFile('../logs/turnirs'+logNum+'.csv', d+'^0^turnirs^'+p.text+'\n', function(){});			break;			case 'turnirsUpdate':				console.info(color(d+' '+p.text, 7));				fs.appendFile('../logs/turnirs'+logNum+'.csv', d+'^0^turnirs^'+p.text+'\n', function(){});			break;			case 'online':				console.info(color(d+' '+p.text, 12));			break;			case 'uptime':				console.info(color(d+' '+p.text, 7));			break;			case 'token':				console.info(color(d+' '+p.text, 7));			break;			case 'okLog':				console.info(color(d+' '+p.text, 7));			break;			case 'profiler':				fs.appendFile('../logs/profiler'+profilername+'.csv', d+'^'+p.text+'\n', function(){});			break;			case 'debug':				console.info(color(d+' '+p.text, 2));				fs.appendFile('../logs/log'+logNum+'.csv', d+'^0^debug^'+p.text+'\n', function(){});			break;		}	}	else{		logs.push(d+'^'+p.id+'^'+p.type+'^'+p.text)		if(logs.length >= (((players.online*5 > 1000)?1000:players.online*5)||5)){			var lj = logs.join('\n')+'\n';			fs.appendFile('../logs/log'+logNum+'.csv', lj, function(){});			console.log({text: 'Логи сохранены, размер: '+logs.length, type: 'okLog'});			logs.length = 0;		}	}}setInterval(function(){bonus()}, 100);setInterval(function(){turnirs.getRating()}, 1000*60*20);setInterval(function(){players.sendOnline()}, 1000*10);setInterval(function(){players.ping()}, 1000*3);console.log({type: 'debug', text: 'Сервер стартанул'});//getToken();//setInterval(function(){getToken()}, 1000*60*60*3);profiler = {};io.sockets.on('connection', function (socket) {    socket.on('message', function (msg) {    	var mt = microtime.now();		try{		msg = JSON.parse(msg);		if(!initTurnirs){			socket.json.send({type: 'waitTurnirs'});			msg.type = 'initTurnirs';		}		switch(msg.type){			case 'init':				console.log({text: 'В игру вошел пользователь '+msg.id, type: 'enter', id: msg.id});				if(players.VKid[msg.id]){					console.log({type: 'enterError', text: 'Множественный вход '+msg.id, id: msg.id});					players[players.VKid[msg.id]].dub = true;					dis(io.sockets.to(players.VKid[msg.id]));					players.VKid[msg.id] = null;				}				if(!players.VKid[msg.id]){					players.VKid[msg.id] = socket.id;					//if(md5.createHash('md5').update(app_id + '_' + msg.id + '_' + secret).digest('hex') == msg.token){					if(1){						mysqlquery(querys.selectPlayer(msg.id), function(err,res){							if(!err){								if(res.length > 0){									players.online += 1;									players[socket.id] = res[0];									players[socket.id].planes=players[socket.id].planes.split(',');									players[socket.id].A_P=players[socket.id].A_P.split(',');																		players[socket.id].weapons = {};									players[socket.id].weaponsLevel = players[socket.id].weaponsLevel.split(',');									players[socket.id].wl = {};									players[socket.id].wars=players[socket.id].wars.split(',');									players[socket.id].quests=players[socket.id].quests.split(',');									players[socket.id].medails=players[socket.id].medails.split(',');									for(var i = 0; i < players[socket.id].planes.length; i++){										players[socket.id].planes[i] -= 0;									}									for(i = 0; i < players[socket.id].A_P.length; i++){										players[socket.id].A_P[i] -= 0;										players[socket.id].weapons[weapons.all[i]] = players[socket.id].A_P[i];										players[socket.id].wl[weapons.all[i]] = players[socket.id].weaponsLevel[i]-0||0;									}									players[socket.id].wl.fallen = 1;									for(i = 0; i < players[socket.id].wars.length; i++){										players[socket.id].wars[i] -= 0;									}									for(i = 0; i < players[socket.id].quests.length; i++){										players[socket.id].quests[i] -= 0;									}									i = null; delete i;									players[socket.id].type='init';									players[socket.id].firstEnter=false;									players[socket.id].life=100;									players[socket.id].tmpTurnOut = false;									players[socket.id].drain -= Math.round((Date.now()-new Date(players[socket.id].lastEnter).getTime())/(1000*60*30));									if(players[socket.id].drain <= 0) players[socket.id].drain = 0;									players[socket.id].gas += Math.round((Date.now()-new Date(players[socket.id].lastEnter).getTime())/10000);									if(players[socket.id].gas >= 100) players[socket.id].gas = 100;									players[socket.id].online = players.online;									players[socket.id].fids=msg.fids;									players[socket.id].chat = chat.join('###');																		players[socket.id].name=msg.name;									players[socket.id].fullName = msg.full_name;									players[socket.id].foto=msg.foto;																		players[socket.id].unixTime = Date.now();									players[socket.id].tehnoTime = players[socket.id].tehnoTime.split(',');									players[socket.id].tehno = players[socket.id].tehno.split(',');									players[socket.id].resources = players[socket.id].resources.split(',');									if(players[socket.id].tehnoTime != 10){										if(players[socket.id].tehnoTime[1] - Date.now() <= 0){											players[socket.id].tehno[players[socket.id].tehnoTime[0]] -= 0;											players[socket.id].tehno[players[socket.id].tehnoTime[0]] += 1;											players[socket.id].tehnoTime = [10,0];										}									}									//players[socket.id].gas = 100;									players[socket.id].tehnoSettings = [1,10,5,1,1]; // [..., 3-10]									//players[socket.id].superSpeed = 0;									//players[socket.id].tehno = [1,1,1,1,1];																		socket.json.send(players[socket.id]);									socket.json.send(quests(socket.id));									socket.json.send(turn.send());									socket.json.send(turnirs.ret());									console.log({text:'Пользователь '+msg.id+' найден в БД, данные отправлены', type: 'enter', id: msg.id});									players[socket.id].socketId=socket.id;									players[socket.id].priceItem = 0;									players[socket.id].ratingItem = 0;									players[socket.id].valueItem = 0;									players[socket.id].ping=0;									players[socket.id].pingCount=0;									players[socket.id].pingTime=0;									players[socket.id].turn=false;									players[socket.id].oppSocket=false;									players[socket.id].oppSocket2='';									players[socket.id].side=false;									players[socket.id].pingDisconnect=false;									players[socket.id].endWar=false;									players[socket.id].range=false;									players[socket.id].wspeed=0;									players[socket.id].wradius=0;									players[socket.id].wsuspension=0;									players[socket.id].wdamage=0;									players[socket.id].wrate=0;									players[socket.id].pot = {A:0,B:0,C:0,D:0,E:0,F:0,G:0,H:0,I:0,J:0,K:0,L:0,M:0,N:0,O:0,P:0};									players[socket.id].per = {A:0,B:0,C:0,D:0,E:0,F:0,G:0,H:0,I:0,J:0,K:0,L:0,M:0,N:0,O:0,P:0};									players[socket.id].enters += 1;									players[socket.id].lastEnter = Date.now();									players[socket.id].dub = false;									players[socket.id].leftRating = 0;									players[socket.id].chatTimer = res[0].chatTimer;									players[socket.id].superPromo = (Date.now()-new Date(players[socket.id].superPromo).getTime())/(1000*60*60*24);								}								else{									mysqlquery(querys.newPlayer(msg.id,msg.full_name,msg.foto), function(err,res){										if(!err){											players.online += 1;											players[socket.id]={												stars:10,												rating:1000,												gas:100,												allGas:0,												drain:0,														speed:1,												radius:1,												suspension:1,												damage:1,												rate:1,														planes:[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0],												A_P:[500,100,80,70,0,0,0,0,15,10,10,3,0,0,0,0],												weapons: {A:500,B:100,C:80,D:70,E:0,F:0,G:0,H:0,I:15,J:10,K:10,L:3,M:0,N:0,O:0,P:0},												wl: {A:1,B:1,C:1,D:1,E:1,F:1,G:1,H:1,fallen:1},												bonus:1,												bonusDate:new Date(),												level:10,												levelBot:0,												enters:1,												lastEnter:new Date(),												wars:[0,0,0,0,0], //all, win, loose, oxo, exit												quests:[0,0,0,0,0,0,0,0,0,0,0,3,0,0,1000,1000,1],												medails:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],												premium:0,												type: 'init',												firstEnter: true,												life: 100, 												tmpTurnOut: false,												priceItem :  0,												ratingItem :  0,												valueItem :  0,												ping: 0,												pingCount: 0,												pingTime: 0,												turn: false,												oppSocket: false,												oppSocket2: '',												side: false,												pingDisconnect: false,												endWar: false,												range: false,												wspeed: 0,												wradius: 0,												wsuspension: 0,												wdamage: 0,												wrate: 0,												pot :  {A:0,B:0,C:0,D:0,E:0,F:0,G:0,H:0,I:0,J:0,K:0,L:0,M:0,N:0,O:0,P:0},												per :  {A:0,B:0,C:0,D:0,E:0,F:0,G:0,H:0,I:0,J:0,K:0,L:0,M:0,N:0,O:0,P:0},												id: msg.id,												dub: false,												online: players.online,												fids: msg.fids,												leftRating: 0,												chat: chat.join('###'),												chatTimer: Date.now(),												superPromo: 1,												tehnoTime: [10,0],												tehno: [1,1,1,1,1],												resources: [3,3,3,3],												unixTime: Date.now(),												tehnoSettings: [1,0.01,5,1,1],												superSpeed: 0,												cube: 0,												foto: msg.foto,												name: msg.name,												fullName: msg.full_name,												win7:0,												win30:0,												onWin7:0,												onWin30:0											}											socket.json.send(players[socket.id]);											socket.json.send(turn.send());											socket.json.send(turnirs.ret());											socket.json.send(quests(socket.id));											console.log({text: 'Пользователь '+msg.id+' не найден в БД, данные записаны и отправлены',type: 'enter', id: msg.id});											players[socket.id].socketId=socket.id;											var req = https.request({host: 'api.vk.com', path: '/method/secure.setUserLevel?&client_secret='+secret+'&timestamp='+Date.now()+'&random='+Date.now()+'&uid='+players[socket.id].id+'&level='+random(2,10)+'&access_token='+token, method: 'GET'}, function(res) {});											req.end();										}									});								}							}						});					}					else{						console.log({text: 'Пользователь '+msg.id+' не прошел авторизацию', type: 'enterError', id: msg.id});						dis(socket);					}				}						break;			case 'setTurnir':				if(msg.num == 1){					if(players[socket.id].stars < 10) socket.json.send({type: 'turnirCancel'})					else{						players[socket.id].onWin7 = 1;						players[socket.id].win7 = 0;						players[socket.id].stars -= 10;						mysqlquery('update players set stars = '+players[socket.id].stars+', onWin7 = 1, win7 = 0, stars = '+players[socket.id].stars+' where id = '+players[socket.id].id+';', function(){})						socket.json.send({type: 'turnirOk', stars: players[socket.id].stars, w7: players[socket.id].onWin7, w30: players[socket.id].onWin30});					}				}				else if(msg.num == 2){					if(players[socket.id].stars < 50) socket.json.send({type: 'turnirCancel'})					else{						players[socket.id].onWin30 = 1;						players[socket.id].win30 = 0;						players[socket.id].stars -= 50;						mysqlquery('update players set stars = '+players[socket.id].stars+', onWin30 = 1, win30= 0, stars = '+players[socket.id].stars+' where id = '+players[socket.id].id+';', function(){})						socket.json.send({type: 'turnirOk', stars: players[socket.id].stars, w7: players[socket.id].onWin7, w30: players[socket.id].onWin30});					}				}			break;			case 'pong':				if(players[socket.id]){					if(players[socket.id].oppSocket && players[socket.id].oppSocket != socket.id+'computer'){						players[socket.id].lastPing = Date.now() - msg.pingTime - msg.rnd;						if(players[socket.id].pingCount < 30){														players[socket.id].ping += players[socket.id].lastPing;							players[socket.id].pingCount += 1;							if(players[socket.id].lastPing > 1000){								console.log({text: 'У пользователя '+players[socket.id].id+' превышен пинг 1000', type: 'ping', id: players[socket.id].id});								players[socket.id].pingDisconnect = 1;								socket.json.send({type: 'pingDisconnect'});								dis(socket);								players[socket.id].ping = 0;								players[socket.id].pingCount = 0;							}						}						else{							if(players[socket.id].ping/players[socket.id].pingCount > 600){								console.log({text: 'У пользователя '+players[socket.id].id+' превышен средний пинг 600', type: 'ping', id: players[socket.id].id});								players[socket.id].pingDisconnect = 1;								socket.json.send({type: 'pingDisconnect'});								dis(socket);								players[socket.id].ping = 0;								players[socket.id].pingCount = 0;							}							else{ 								players[socket.id].ping = 0;								players[socket.id].pingCount = 0;							}						}					}				}				else if(!players[socket.id]){					console.log({text: 'Пинг от незарегистрированного игрока', type: 'error'});					dis(socket);				}			break;			case 'buy':				switch(msg.typeBuy){										case 'param':						players[socket.id].priceItem = Math.ceil(((players[socket.id][msg.item]-1)*15)*players[socket.id][msg.item]*2) || 1;						players[socket.id].ratingItem = Math.ceil(((players[socket.id][msg.item]-1)*15)*players[socket.id][msg.item]*1000) || 1000;						players[socket.id].valueItem = 0.1;						if(players[socket.id].rating < players[socket.id].ratingItem || players[socket.id].stars < players[socket.id].priceItem){							socket.json.send({type: 'buyCancel'});							console.log({text: 'У пользователя ' + players[socket.id].id + ' недостаточно рейтинга или звезд для покупки ' + msg.item, type: 'buyError', id: players[socket.id].id});						}						else if(players[socket.id][msg.item]*10+players[socket.id].valueItem*10 <= maxParam[msg.item]*10){							players[socket.id][msg.item] += players[socket.id].valueItem;							players[socket.id][msg.item] = (players[socket.id][msg.item]).toFixed(1)-0;							players[socket.id].stars -= players[socket.id].priceItem;							mysqlquery(querys.saveParam(socket.id, msg.item));							msg.stars = players[socket.id].stars;							msg.value = players[socket.id][msg.item];							socket.json.send(msg)							console.log({text: 'Пользователь ' + players[socket.id].id + ' успешно приобрел ' + msg.item, type: 'buy', id: players[socket.id].id});						}					break;					case 'plane':						if(players[socket.id].stars < weapons[msg.item[0]][msg.item[1]].price || 						players[socket.id].rating < weapons[msg.item[0]][msg.item[1]].rating ||						players[socket.id].resources[0] < weapons[msg.item[0]][msg.item[1]].resources[0] ||						players[socket.id].resources[1] < weapons[msg.item[0]][msg.item[1]].resources[1] ||						players[socket.id].resources[2] < weapons[msg.item[0]][msg.item[1]].resources[2] ||						players[socket.id].resources[3] < weapons[msg.item[0]][msg.item[1]].resources[3] ||						players[socket.id].tehno[0] < weapons[msg.item[0]][msg.item[1]].tehno[0] ||						players[socket.id].tehno[1] < weapons[msg.item[0]][msg.item[1]].tehno[1] ||						players[socket.id].tehno[2] < weapons[msg.item[0]][msg.item[1]].tehno[2] ||						players[socket.id].tehno[3] < weapons[msg.item[0]][msg.item[1]].tehno[3] ||						players[socket.id].tehno[4] < weapons[msg.item[0]][msg.item[1]].tehno[4]){							socket.json.send({type: 'buyCancel'});							console.log({text: 'У пользователя ' + players[socket.id].id + ' недостаточно рейтинга или звезд или ресурсов для покупки ' + ('plane '+msg.item[0]+msg.item[1]), type: 'buyError', id: players[socket.id].id});						}						else if((msg.item[1] == 1 || msg.item[1] == 2) && players[socket.id].planes[weapons.planes[msg.item[0]+''+(msg.item[1]-1)]] != 1){							socket.json.send({type: 'buyCancel'});							console.log({text: 'У пользователя ' + players[socket.id].id + ' не куплен '+(msg.item[0]+''+(msg.item[1]-1))+' покупки ' + ('plane '+msg.item[0]+msg.item[1]), type: 'buyError', id: players[socket.id].id});						}						else{							players[socket.id].planes[weapons.planes[msg.item[0]+msg.item[1]]] = 1;														players[socket.id].stars -= weapons[msg.item[0]][msg.item[1]].price;							players[socket.id].resources[0] -= weapons[msg.item[0]][msg.item[1]].resources[0];							players[socket.id].resources[1] -= weapons[msg.item[0]][msg.item[1]].resources[1];							players[socket.id].resources[2] -= weapons[msg.item[0]][msg.item[1]].resources[2];							players[socket.id].resources[3] -= weapons[msg.item[0]][msg.item[1]].resources[3];														mysqlquery(querys.saveParam(socket.id, 'planes'));							msg.stars = players[socket.id].stars;							msg.planes = players[socket.id].planes;							msg.resources = players[socket.id].resources;							socket.json.send(msg)							console.log({text:'Пользователь ' + players[socket.id].id + ' успешно приобрел ' + ('plane '+msg.item[0]+msg.item[1]), type: 'buy', id: players[socket.id].id});						}					break;					case 'weapon':						players[socket.id].priceItem = 1; 						players[socket.id].ratingItem = weapons[msg.item].rating;						players[socket.id].valueItem = weapons[msg.item].complect;						if(players[socket.id].rating < players[socket.id].ratingItem || players[socket.id].stars < players[socket.id].priceItem){							socket.json.send({type: 'buyCancel'});							console.log({text: 'У пользователя ' + players[socket.id].id + ' недостаточно рейтинга или звезд для покупки ' + msg.item, type: 'buyError', id: players[socket.id].id});						} 						else if(players[socket.id].weapons[msg.item]+players[socket.id].valueItem <= maxParam[msg.item]){							players[socket.id].weapons[msg.item] += players[socket.id].valueItem;							players[socket.id].stars -= players[socket.id].priceItem;							mysqlquery(querys.saveParam(socket.id, 'A_P'));							msg.stars = players[socket.id].stars;							msg.value = players[socket.id].weapons[msg.item];							socket.json.send(msg);							console.log({text: 'Пользователь ' + players[socket.id].id + ' успешно приобрел ' + msg.item, type: 'buy', id: players[socket.id].id});						}					break;					case 'wl':						msg.prMet = weapons[msg.item].WLprice[players[socket.id].wl[msg.item]][0];						msg.prSil = weapons[msg.item].WLprice[players[socket.id].wl[msg.item]][1];						msg.prTrot = weapons[msg.item].WLprice[players[socket.id].wl[msg.item]][2];						msg.prDiam = weapons[msg.item].WLprice[players[socket.id].wl[msg.item]][3];						if(players[socket.id].resources[0] < msg.prMet ||						players[socket.id].resources[1] < msg.prMet ||						players[socket.id].resources[2] < msg.prMet ||						players[socket.id].resources[3] < msg.prMet){							socket.json.send({type: 'buyCancel'});							console.log({text: 'У пользователя ' + players[socket.id].id + ' недостаточно ресурсов для усовершенствования ' + msg.item + ' до WL-'+(players[socket.id].wl[msg.item]+1), type: 'buyError', id: players[socket.id].id});						}						else{							players[socket.id].wl[msg.item] += 1;							players[socket.id].resources[0] -= msg.prMet;							players[socket.id].resources[1] -= msg.prSil;							players[socket.id].resources[2] -= msg.prTrot;							players[socket.id].resources[3] -= msg.prDiam;							mysqlquery(querys.saveParam(socket.id, 'weaponsLevel'));							msg.wl = players[socket.id].wl[msg.item];							msg.resources = players[socket.id].resources;							socket.json.send(msg);							console.log({text:'Пользователь ' + players[socket.id].id + ' успешно улучшил ' + msg.item + ' до WL-'+msg.wl, type: 'buy', id: players[socket.id].id});						}					break;					case 'tehnology':						if(players[socket.id].stars < players[socket.id].tehno[msg.item]*10*players[socket.id].tehno[msg.item] || players[socket.id].resources[3] < players[socket.id].tehno[msg.item]*3*players[socket.id].tehno[msg.item]){							console.log({text: 'Недостаточно звёзд или алмазов для изучения '+msg.item, type:'buyError', id: players[socket.id].id});							socket.json.send({type: 'buyCancel'});						}						else if(players[socket.id].tehnoTime[0] != 10){							console.log({text: 'Нельзя изучать одновременно несколько технологий', type:'buyError', id: players[socket.id].id});							socket.json.send({type: 'buyCancel'});						}						else{							players[socket.id].resources[3] -= players[socket.id].tehno[msg.item]*3*players[socket.id].tehno[msg.item];							players[socket.id].stars -= players[socket.id].tehno[msg.item]*10*players[socket.id].tehno[msg.item];							players[socket.id].tehnoTime = [msg.item, Date.now()+1000*(21600+players[socket.id].tehno[msg.item]*21600)];							console.log({text: 'Технология '+msg.item+' начала изучаться', type:'buy', id: players[socket.id].id});							mysqlquery(querys.saveTehno(socket.id));							msg.stars = players[socket.id].stars;							msg.resources = players[socket.id].resources;							msg.tehnoTime = players[socket.id].tehnoTime;							msg.unixTime = Date.now();							socket.json.send(msg);						}					break;				}			break;			case 'getTehno':				if(players[socket.id].tehnoTime[1]-Date.now() <= 0){					players[socket.id].tehno[players[socket.id].tehnoTime[0]] -= 0;					players[socket.id].tehno[players[socket.id].tehnoTime[0]] += 1;					players[socket.id].tehnoTime = [10,0];					msg.tehno = players[socket.id].tehno;					mysqlquery(querys.saveTehno(socket.id));					socket.json.send(msg);				}				else{					msg.unixTime = Date.now();					socket.json.send(msg);				}			break;			case 'buyStars':				players[socket.id].valueItem = priceStars[msg.val].stars+priceStars[msg.val].bonus;				console.log({type: 'shop', id: players[socket.id].id, pp: 'start', item: players[socket.id].valueItem});			break;			case 'buyStarsOk':				var rnd = random(0,4);				if(rnd == 1){					players[socket.id].valueItem = players[socket.id].valueItem*2					var bnc = 1;				}				else{					players[socket.id].valueItem;					var bnc = 0;				}				players[socket.id].stars += players[socket.id].valueItem;				mysqlquery(querys.saveStars(socket.id));				console.log({type: 'shop', id: players[socket.id].id, pp: 'ok', item: players[socket.id].valueItem, order: msg.orderId});				socket.json.send({type: msg.type, val: players[socket.id].stars, bnc: bnc});				players[socket.id].valueItem = false;			break;			case 'buyStarsCancel':				console.log({type: 'shop', id: players[socket.id].id, pp: 'cancel', item: players[socket.id].valueItem});				players[socket.id].valueItem = false;			break;			case 'buyStarsFail': 				console.log({type: 'shop', id: players[socket.id].id, pp: 'fail', item: players[socket.id].valueItem});				players[socket.id].valueItem = false;			break;			case 'buyCube':				players[socket.id].valueItem = buyCube(msg.val, players[socket.id].cube);				console.log({type: 'shop', id: players[socket.id].id, pp: 'start', item: players[socket.id].valueItem});			break;			case 'buyCubeOk':				players[socket.id].stars-=0;players[socket.id].stars += players[socket.id].valueItem[0];				players[socket.id].resources[0]-=0;players[socket.id].resources[0] += players[socket.id].valueItem[1];				players[socket.id].resources[1]-=0;players[socket.id].resources[1] += players[socket.id].valueItem[2];				players[socket.id].resources[2]-=0;players[socket.id].resources[2] += players[socket.id].valueItem[3];				players[socket.id].resources[3]-=0;players[socket.id].resources[3] += players[socket.id].valueItem[4];				players[socket.id].cube -= 0; players[socket.id].cube += 1;				mysqlquery(querys.saveGame(socket.id));				console.log({type: 'shop', id: players[socket.id].id, pp: 'ok', item: players[socket.id].valueItem.join(','), order: msg.orderId});				socket.json.send({type: msg.type, stars: players[socket.id].stars, resources: players[socket.id].resources, what: players[socket.id].valueItem});				players[socket.id].valueItem = false;			break;			case 'buyCubeCancel':				console.log({type: 'shop', id: players[socket.id].id, pp: 'cancel', item: players[socket.id].valueItem});				players[socket.id].valueItem = false;			break;			case 'buyCubeFail': 				console.log({type: 'shop', id: players[socket.id].id, pp: 'fail', item: players[socket.id].valueItem});				players[socket.id].valueItem = false;			break;			case 'buyRating':				console.log({type: 'shop', id: players[socket.id].id, pp: 'start', item: '10% рейтинга'});			break;			case 'buyRatingOk':				players[socket.id].premium += 10;				mysqlquery(querys.savePremium(socket.id));				console.log({type: 'shop', id: players[socket.id].id, pp: 'ok', item: '+10% рейтинга', order: msg.orderId});				socket.json.send({type: msg.type, rating: quests(socket.id).rating});			break;			case 'buyRatingCancel':				console.log({type: 'shop', id: players[socket.id].id, pp: 'cancel', item: '10% рейтинга'});			break;			case 'buyRatingFail':				console.log({type: 'shop', id: players[socket.id].id, pp: 'fail', item: '10% рейтинга'});			break;			case 'buyTehno':				console.log({type: 'shop', id: players[socket.id].id, pp: 'start', item: '-10 часов'});			break;			case 'buyTehnoOk':				players[socket.id].tehnoTime[1] -= (1000*60*60*10);				if(players[socket.id].tehnoTime[1] - Date.now() <= 0){					players[socket.id].tehno[players[socket.id].tehnoTime[0]] -= 0;					players[socket.id].tehno[players[socket.id].tehnoTime[0]] += 1;					players[socket.id].tehnoTime = [10,0];									}				mysqlquery(querys.saveTehno(socket.id));				console.log({type: 'shop', id: players[socket.id].id, pp: 'ok', item: '-10 часов', order: msg.orderId});				socket.json.send({type: msg.type, tehno: players[socket.id].tehno, tehnoTime: players[socket.id].tehnoTime, unixTime: Date.now()});			break;			case 'buyTehnoCancel':				console.log({type: 'shop', id: players[socket.id].id, pp: 'cancel', item: '-10 часов'});			break;			case 'buyTehnoFail':				console.log({type: 'shop', id: players[socket.id].id, pp: 'fail', item: '-10 часов'});			break;			case 'inTurn':				players[socket.id].range = (msg.range < 0) ? 0 : msg.range;				if(players[socket.id].gas < 10){					console.log({type: 'turnError', text: 'У пользователя '+players[socket.id].id+' недостаточно топлива для участия в битве', id: players[socket.id].id});					socket.json.send({type: 'initWarCancel', why: 'gas'});				}				else if(players[socket.id].range <= players[socket.id].stars){					players.sendAll(turn.newPlayer(socket.id));					console.log({type: 'inTurn', text: 'Игрок '+players[socket.id].id+' встал в очередь. Данные отправлены остальным.', id: players[socket.id].id});					players[socket.id].turn = true;					players[socket.id].oppSocket = false;					players[socket.id].plane = (players[socket.id].planes[weapons.planes[msg.plane+msg.planeMk]]) ? msg.plane : 'default';					players[socket.id].planeMk = (players[socket.id].planes[weapons.planes[msg.plane+msg.planeMk]]) ? msg.planeMk : 0;				}				else if(players[socket.id].range > players[socket.id].stars){					console.log({type: 'turnError', text: 'У игрока '+players[socket.id].id+' недостаточно звезд для ставки '+players[socket.id].range, id: players[socket.id].id});					socket.json.send({type: 'initWarCancel', why: 'stars'});				}			break;			case 'outTurn':				var tmp = turn.outPlayer(socket.id);				if(tmp != false){					players.sendAll(tmp);					console.log({text: 'Игрок '+players[socket.id].id+' вышел из очереди. Данные отправлены остальным.', type: 'outTurn', id: players[socket.id].id});					players[socket.id].turn = false;					players[socket.id].oppSocket = false;				}				tmp = null; delete tmp;			break;			case 'initWar':				console.log({type: 'initWar', text: 'Игрок '+players[socket.id].id+' бросил вызов игроку '+msg.id.replace(/(\D*)/g, ''), id: players[socket.id].id});				if(players.VKid[msg.id.replace(/(\D*)/g, '')]){					players[socket.id].oppSocket = turn.getPlayer(msg.id.replace(/(\D*)/g, ''));					if(players[socket.id].oppSocket){						if(players[socket.id].gas < 10){							console.log({text:'У пользователя '+players[socket.id].id+' недостаточно топлива для участия в битве', type: 'initWarError', id: players[socket.id].id});							players[socket.id].oppSocket = false;							socket.json.send({type: 'initWarCancel', why: 'gas'});						}						else if(players[socket.id].stars < players[players[socket.id].oppSocket.socket].range){							socket.json.send({type: 'initWarCancel', why: 'stars'});							players[socket.id].oppSocket = false;							console.log({text:'У пользователя '+players[socket.id].id+' недостаточно звезд для участия в битве', type: 'initWarError', id: players[socket.id].id});						}						else if(players[socket.id].rating-5000 > players[players[socket.id].oppSocket.socket].rating){							socket.json.send({type: 'initWarCancel', why: 'ratingMax'});							players[socket.id].oppSocket = false;							console.log({text:'У пользователя '+players[socket.id].id+' слишком много рейтинга для участия в битве',type: 'initWarError', id: players[socket.id].id});						}						else if(players[socket.id].rating+5000 < players[players[socket.id].oppSocket.socket].rating){							socket.json.send({type: 'initWarCancel', why: 'ratingMin'});							players[socket.id].oppSocket = false;							console.log({text:'У пользователя '+players[socket.id].id+' слишком мало рейтинга для участия в битве', type: 'initWarError', id: players[socket.id].id});						}						else if(players[players[socket.id].oppSocket.socket].oppSocket){							socket.json.send({type: 'initWarCancel', why: 'load'});							players[socket.id].oppSocket = false;							console.log({text:'Оппонент '+msg.id.replace(/(\D*)/g, '')+' которого выбрал пользователь '+players[socket.id].id+' занят', type: 'initWarError', id: players[socket.id].id});						}						else{							players[socket.id].plane = (players[socket.id].planes[weapons.planes[msg.plane+msg.planeMk]]) ? msg.plane : 'default';							players[socket.id].planeMk = (players[socket.id].planes[weapons.planes[msg.plane+msg.planeMk]]) ? msg.planeMk : 0;							players[socket.id].oppSocket = players[socket.id].oppSocket.socket;							players[players[socket.id].oppSocket].oppSocket = socket.id;							io.sockets.to(players[socket.id].oppSocket).json.send({type: 'initWar', id: msg.id.replace(/(\D*)/g, ''), name: players[socket.id].name, foto: players[socket.id].foto, rating: players[socket.id].rating});						}					}					else{						console.log({text:'Пользователь '+msg.id.replace(/(\D*)/g, '')+' не найден в очереди', type: 'initWarError', id: players[socket.id].id});						players[socket.id].oppSocket = false;						socket.json.send({type: 'initWarCancel', why: 'no'});					}				}				else{					console.log({text:'Пользователь '+msg.id.replace(/(\D*)/g, '')+' не найден в игре', type: 'initWarError', id: players[socket.id].id});					socket.json.send({type: 'initWarCancel', why: 'no'});				}			break;			case 'getParamOpp':				var psid = players.VKid[msg.id];				if(psid){					msg.params = [players[psid].A_P.slice(0,4),players[psid].A_P.slice(8,12),players[psid].speed,players[psid].radius,players[psid].suspension,players[psid].damage,players[psid].rate,players[psid].A_P.slice(4,8),players[psid].A_P.slice(12),players[psid].plane,players[psid].planeMk,players[psid].tehno[0],players[psid].tehno[1],players[psid].tehno[2],players[psid].tehno[3],players[psid].tehno[4]];					msg.params = msg.params.slice(0,players[socket.id].tehno[4]);					socket.json.send(msg);				}				else{					socket.json.send(msg);				}			break;			case 'startWar':				if(msg.bot){					if(players[socket.id].gas < 10){						console.log({text:'У пользователя '+players[socket.id].id+' недостаточно топлива для участия в битве', type: 'initWarError', id: players[socket.id].id});						players[socket.id].oppSocket = false;						socket.json.send({type: 'initWarCancel', why: 'gas'});					}					else{						players[socket.id].plane = (players[socket.id].planes[weapons.planes[msg.plane+msg.planeMk]]) ? msg.plane : 'default';						players[socket.id].planeMk = (players[socket.id].planes[weapons.planes[msg.plane+msg.planeMk]]) ? msg.planeMk : 0;						players[socket.id].oppSocket = socket.id+'computer';						delete players[players[socket.id].oppSocket];						players[players[socket.id].oppSocket] = clone(players[socket.id], players[socket.id].levelBot);						players[players[socket.id].oppSocket].id = 'computer';						players[players[socket.id].oppSocket].oppSocket = socket.id;						players[socket.id].range = players[players[socket.id].oppSocket].range;					}				}				if(players[socket.id].oppSocket){				console.log({text:'Война между '+players[socket.id].id+'('+players[socket.id].rating+','+players[socket.id].stars+') и '+players[players[socket.id].oppSocket].id+'('+players[players[socket.id].oppSocket].rating+','+players[players[socket.id].oppSocket].stars+') началась, ставка '+players[socket.id].range, type: 'startWar', id: players[socket.id].id});				players[socket.id].gas -= 10;				if(players[socket.id].gas <= 0) players[socket.id].gas = 0;				players[players[socket.id].oppSocket].gas -= 10;				if(players[players[socket.id].oppSocket].gas <= 0) players[players[socket.id].oppSocket].gas = 0;				players[socket.id].life = 100;				players[players[socket.id].oppSocket].life = 100;				players[socket.id].endWar = false;				players[players[socket.id].oppSocket].endWar = false;				players[socket.id].type = 'startWar';				players[socket.id].side = 'left';				players[socket.id].wspeed = (0.2+players[socket.id].speed+weapons[players[socket.id].plane][players[socket.id].planeMk].speed*players[socket.id].speed/10).toFixed(2)-0;				players[socket.id].wradius = (0.3+players[socket.id].radius+weapons[players[socket.id].plane][players[socket.id].planeMk].radius*players[socket.id].radius/10).toFixed(2)-0;				players[socket.id].wsuspension = (players[socket.id].suspension+weapons[players[socket.id].plane][players[socket.id].planeMk].suspension*players[socket.id].suspension/10).toFixed(2)-0;				players[socket.id].wdamage = (players[socket.id].damage+weapons[players[socket.id].plane][players[socket.id].planeMk].damage*players[socket.id].damage/10).toFixed(2)-0;				players[socket.id].wrate = (players[socket.id].rate+weapons[players[socket.id].plane][players[socket.id].planeMk].rate*players[socket.id].rate/10).toFixed(2)-0;				//players[socket.id].wSuperSpeed = (0.3+(players[socket.id].tehno[1]/3)/players[socket.id].tehnoSettings[1]).toFixed(2)-0;				//players[socket.id].superSpeedT = (players[socket.id].tehnoSettings[1]*players[socket.id].tehno[1]).toFixed(2)-0; // 0.01 to 0.05				players[socket.id].wSuperSpeed = players[socket.id].tehno[1]/5+players[socket.id].tehnoSettings[1]/7;				players[socket.id].superSpeedT = (11-players[socket.id].tehnoSettings[1])/(players[socket.id].tehnoSettings[1]*(11-players[socket.id].tehnoSettings[1]));				//дублирование для перепроверки перезарядки и бонуса быстрой перезарядки				players[socket.id].wratefper = players[socket.id].wrate;				players[socket.id].wsuspensionfper = players[socket.id].wsuspension;				players[socket.id].planeNaturalParams = players[socket.id].speed+':'+players[socket.id].suspension+':'+players[socket.id].radius+':'+players[socket.id].damage+':'+players[socket.id].rate;				players[socket.id].lastRegen = Date.now();				players[socket.id].superSpeed = 0;				players[socket.id].warBonus = 0;				for(var i = 0; i < weapons.all.length; i++){					players[socket.id].per[weapons.all[i]] = Date.now();					players[socket.id].pot[weapons.all[i]] = 0;				}				players[players[socket.id].oppSocket].range = players[socket.id].range;								players[players[socket.id].oppSocket].type = 'startWar';				players[players[socket.id].oppSocket].side = 'right';				players[players[socket.id].oppSocket].wspeed = (0.2+players[players[socket.id].oppSocket].speed+weapons[players[players[socket.id].oppSocket].plane][players[players[socket.id].oppSocket].planeMk].speed*players[players[socket.id].oppSocket].speed/10).toFixed(2)-0;				players[players[socket.id].oppSocket].wradius = (0.3+players[players[socket.id].oppSocket].radius+weapons[players[players[socket.id].oppSocket].plane][players[players[socket.id].oppSocket].planeMk].radius*players[players[socket.id].oppSocket].radius/10).toFixed(2)-0;				players[players[socket.id].oppSocket].wsuspension = (players[players[socket.id].oppSocket].suspension+weapons[players[players[socket.id].oppSocket].plane][players[players[socket.id].oppSocket].planeMk].suspension*players[players[socket.id].oppSocket].suspension/10).toFixed(2)-0;				players[players[socket.id].oppSocket].wdamage = (players[players[socket.id].oppSocket].damage+weapons[players[players[socket.id].oppSocket].plane][players[players[socket.id].oppSocket].planeMk].damage*players[players[socket.id].oppSocket].damage/10).toFixed(2)-0;				players[players[socket.id].oppSocket].wrate = (players[players[socket.id].oppSocket].rate+weapons[players[players[socket.id].oppSocket].plane][players[players[socket.id].oppSocket].planeMk].rate*players[players[socket.id].oppSocket].rate/10).toFixed(2)-0;				//players[players[socket.id].oppSocket].wSuperSpeed = (0.3+(players[players[socket.id].oppSocket].tehno[1]/3)/players[players[socket.id].oppSocket].tehnoSettings[1]).toFixed(2)-0;				//players[players[socket.id].oppSocket].superSpeedT = (players[players[socket.id].oppSocket].tehnoSettings[1]*players[players[socket.id].oppSocket].tehno[1]).toFixed(2)-0; // 0.01 to 0.05				players[players[socket.id].oppSocket].wSuperSpeed = players[players[socket.id].oppSocket].tehno[1]/5+players[players[socket.id].oppSocket].tehnoSettings[1]/7;				players[players[socket.id].oppSocket].superSpeedT = (11-players[players[socket.id].oppSocket].tehnoSettings[1])/(players[players[socket.id].oppSocket].tehnoSettings[1]*(11-players[players[socket.id].oppSocket].tehnoSettings[1]));				players[players[socket.id].oppSocket].wratefper = players[players[socket.id].oppSocket].wrate;				players[players[socket.id].oppSocket].wsuspensionfper = players[players[socket.id].oppSocket].wsuspension;				players[players[socket.id].oppSocket].planeNaturalParams = players[players[socket.id].oppSocket].speed+':'+players[players[socket.id].oppSocket].suspension+':'+players[players[socket.id].oppSocket].radius+':'+players[players[socket.id].oppSocket].damage+':'+players[players[socket.id].oppSocket].rate;				players[players[socket.id].oppSocket].lastRegen = Date.now();				players[players[socket.id].oppSocket].superSpeed = 0;				players[players[socket.id].oppSocket].warBonus = 0;				for(var i = 0; i < weapons.all.length; i++){					players[players[socket.id].oppSocket].per[weapons.all[i]] = Date.now();					players[players[socket.id].oppSocket].pot[weapons.all[i]] = 0;				}				players[players[socket.id].oppSocket].any = players[socket.id].wspeed+':'+players[socket.id].wsuspension+':'+players[socket.id].wradius+':'+players[socket.id].wdamage+':'+players[socket.id].wrate;				players[socket.id].any = players[players[socket.id].oppSocket].wspeed+':'+players[players[socket.id].oppSocket].wsuspension+':'+players[players[socket.id].oppSocket].wradius+':'+players[players[socket.id].oppSocket].wdamage+':'+players[players[socket.id].oppSocket].wrate;				var parOpp = {					foto: players[socket.id].foto,					name: players[socket.id].name,					life: players[socket.id].life,					plane: players[socket.id].plane,					planeMk: players[socket.id].planeMk,					wspeed: players[socket.id].wspeed,					wsuspension: players[socket.id].wsuspension,					wradius: players[socket.id].wradius,					wdamage: players[socket.id].wdamage,					wrate: players[socket.id].wrate,					side: players[socket.id].side,					regenTime: players[socket.id].tehnoSettings[2]*1000,					wSuperSpeed: players[socket.id].wSuperSpeed,					superSpeedT: players[socket.id].superSpeedT				};				var parGame = {					foto: players[players[socket.id].oppSocket].foto,					name: players[players[socket.id].oppSocket].name,					life: players[players[socket.id].oppSocket].life,					plane: players[players[socket.id].oppSocket].plane,					planeMk: players[players[socket.id].oppSocket].planeMk,					wspeed: players[players[socket.id].oppSocket].wspeed,					wsuspension: players[players[socket.id].oppSocket].wsuspension,					wradius: players[players[socket.id].oppSocket].wradius,					wdamage: players[players[socket.id].oppSocket].wdamage,					wrate: players[players[socket.id].oppSocket].wrate,					side: players[players[socket.id].oppSocket].side,					regenTime: players[players[socket.id].oppSocket].tehnoSettings[2]*1000,					wSuperSpeed: players[players[socket.id].oppSocket].wSuperSpeed,					superSpeedT: players[players[socket.id].oppSocket].superSpeedT				};				if(players[players[socket.id].oppSocket].id == 'computer'){					parGame.weapons = players[players[socket.id].oppSocket].weapons;					parGame.all = players[players[socket.id].oppSocket].all;					parGame.name = 'Компьютер';					parGame.foto = 'images/computer.gif';				}				if(players[socket.id].oppSocket != socket.id+'computer') io.sockets.to(players[socket.id].oppSocket).json.send({type: 'startWar', parOpp: parOpp, parGame: parGame});				socket.json.send({type: 'startWar', parOpp: parGame, parGame: parOpp});				players.wars.push({_1: socket.id, _2: players[socket.id].oppSocket});				if(players[socket.id].oppSocket != socket.id+'computer') players.sendAll(turn.outPlayer(players[socket.id].oppSocket));				players.sendAll(turn.outPlayer(socket.id));				players[socket.id].wars[0] += 1;				players[players[socket.id].oppSocket].wars[0] += 1;				}			break;			case 'initWarCancel':				console.log({text:'Игрок '+players[socket.id].id+' отклонил вызов', type: 'initWarCancel', id: players[socket.id].id});				io.sockets.to(players[socket.id].oppSocket).json.send({type: 'initWarCancel', why: 'cancel'});				players[players[socket.id].oppSocket].oppSocket = false;				players[socket.id].oppSocket = false;			break;			case 'initWarOkCancel':				console.log({text:'Игрок '+players[socket.id].id+' отменил вызов игроку', type: 'initWarCancel', id: players[socket.id].id});				io.sockets.to(players[socket.id].oppSocket).json.send({type: 'initWarOkCancel'});				players[players[socket.id].oppSocket].oppSocket = false;				players[socket.id].oppSocket = false;			break;			case 'correct':				msg.ping = players[socket.id].lastPing+players[players[socket.id].oppSocket].lastPing;				console.info(players[socket.id].lastPing, players[players[socket.id].oppSocket].lastPing, msg.ping);				io.sockets.to(players[socket.id].oppSocket).json.send(msg);			break;			case 'shot':				msg.bot = msg.bot ? socket.id+'computer' : socket.id;				if(Date.now() < players[msg.bot].per[msg.typeW]){					//console.log('перезарядка', {type: 'warn', id: players[msg.bot].id});				}				else if(players[msg.bot].weapons[msg.typeW] <= 0){					players[msg.bot].weapons[msg.typeW] = 0;					console.log({text:'закончились боеприпасы', type: 'shotError', id: players[msg.bot].id});				}				else if(!weapons[players[msg.bot].plane][players[msg.bot].planeMk].weaponsNI[msg.typeW] && weapons.weaponsNI[msg.typeW]){					console.log({text:'оружие недоступно', type: 'shotError', id: players[msg.bot].id});				}				else if(!weapons[players[msg.bot].plane][players[msg.bot].planeMk].bonusesNI[msg.typeW] && weapons.bonusesNI[msg.typeW]){					console.log({text:'бонус недоступен', type: 'shotError', id: players[msg.bot].id});				}				else{					if(players[msg.bot].wrate != players[msg.bot].wratefper && Date.now() >= players[msg.bot].per.P){						players[msg.bot].wrate = players[msg.bot].wratefper;					}					if(weapons.weaponsNI[msg.typeW]){						msg.wl = players[msg.bot].wl[msg.typeW]-1;						if(players[msg.bot].wrate < 10000){							msg.per = (weapons[msg.typeW].rate[msg.wl]*1000/players[msg.bot].wrate).toFixed(2)-0;						}						else{							msg.per = 1000;						}						players[msg.bot].per[msg.typeW] = Date.now() + msg.per;						players[msg.bot].weapons[msg.typeW] -= 1;						players[msg.bot].pot[msg.typeW] += 1;						msg.hit = weapons[msg.typeW].radius[msg.wl];						msg.speed = weapons[msg.typeW].speed[msg.wl];						msg.val = players[msg.bot].weapons[msg.typeW];						msg.side = players[msg.bot].side;						if(Date.now() >= players[players[msg.bot].oppSocket].per.O){							msg.a += (random(-5+(players[msg.bot].tehno[3]/2),5-(players[msg.bot].tehno[3]/2))).toFixed(2)-0;						}						else msg.a += (random(-15+(players[msg.bot].tehno[3]/2),15-(players[msg.bot].tehno[3]/2))).toFixed(2)-0;					}					else if(weapons.bonusesNI[msg.typeW] && !players[msg.bot].endWar){						msg.per = (weapons[msg.typeW].rate*1000*players[msg.bot].wdamage).toFixed(2)-0;						players[msg.bot].per[msg.typeW] = Date.now() + msg.per; 						players[msg.bot].weapons[msg.typeW] -= 1;						players[msg.bot].pot[msg.typeW] += 1;						msg.val = players[msg.bot].weapons[msg.typeW];						msg.side = players[msg.bot].side;						switch(msg.typeW){							case 'I':								players[msg.bot].life += 10;								msg.life = Math.round(players[msg.bot].life);								if(players[msg.bot].life > 100){									players[msg.bot].life = 100;									msg.life = 100;								}							break;							case 'J':								players[msg.bot].wsuspension += 2;							break;							case 'P':								players[msg.bot].wrate = 100000;							break;						};					}					msg.hot = ((weapons[msg.typeW].hot/5)+(weapons[msg.typeW].hot/players[msg.bot].tehno[4])).toFixed(2)-0;					io.sockets.to(msg.bot).json.send(msg);					if(players[msg.bot].oppSocket != msg.bot+'computer') io.sockets.to(players[msg.bot].oppSocket).json.send(msg);				}							break;			case 'superSpeed':				if(msg.bot){msg.bot = socket.id+'computer'}				else{msg.bot = socket.id}				if(players[msg.bot].superSpeed < Date.now()){					msg.timer = 1000*players[msg.bot].tehno[1]*players[msg.bot].tehnoSettings[1]; //tehnoSettings[1] - значения от 0.3 до 1.7. Меньше - медленнее скорость медленнее убывает, больше - больше скорость быстрее убывает					msg.speed = (0.3+(players[msg.bot].tehno[1]/3)/players[msg.bot].tehnoSettings[1]).toFixed(2)-0;					players[msg.bot].superSpeed = Date.now()+10000+msg.timer;					msg.side = players[msg.bot].side;					io.sockets.to(msg.bot).json.send(msg);					if(players[msg.bot].oppSocket != msg.bot+'computer') io.sockets.to(players[msg.bot].oppSocket).json.send(msg);				}				else{					console.log({text:'Супер скорость ещё не накопилась', type: 'superSpeedError', id: players[msg.bot].id});				}			break;			case 'regen':				if(msg.bot){msg.bot = socket.id+'computer'}				else{msg.bot = socket.id}				players[msg.bot].life += ((Date.now() - players[msg.bot].lastRegen)/1000)*(players[msg.bot].tehno[2]/30);				if(players[msg.bot].life > 100) players[msg.bot].life = 100;				msg.life = Math.round(players[msg.bot].life);				io.sockets.to(msg.bot).json.send(msg);				msg.type = 'regenOpp';				io.sockets.to(players[msg.bot].oppSocket).json.send(msg);				players[msg.bot].lastRegen = Date.now();			break;			case 'hit':				if(msg.bot){msg.bot = socket.id+'computer'}				else{msg.bot = socket.id}				if(players[msg.bot].wsuspension != players[msg.bot].wsuspensionfper && Date.now() >= players[msg.bot].per.J){					players[msg.bot].wsuspension = players[msg.bot].wsuspensionfper;				}				msg.wl = players[msg.bot].wl[msg.typeW]-1;				msg.damage = weapons.randDamage(msg.typeW,msg.wl)*players[players[msg.bot].oppSocket].wdamage/players[msg.bot].wsuspension;				if(Date.now() < players[msg.bot].per.N){					players[msg.bot].life -= msg.damage;					players[players[msg.bot].oppSocket].life -= msg.damage/2;					msg.life = Math.round(players[msg.bot].life);					io.sockets.to(msg.bot).json.send(msg);					msg.type = 'pop';					io.sockets.to(players[msg.bot].oppSocket).json.send(msg);											msg.life = Math.round(players[players[msg.bot].oppSocket].life);					io.sockets.to(msg.bot).json.send(msg);					msg.type = 'hit';					io.sockets.to(players[msg.bot].oppSocket).json.send(msg);				}				else{					players[msg.bot].life -= msg.damage;					msg.life = Math.round(players[msg.bot].life);					io.sockets.to(msg.bot).json.send(msg);					msg.type = 'pop';					io.sockets.to(players[msg.bot].oppSocket).json.send(msg);				}				if(players[msg.bot].life <= 0 && !players[msg.bot].endWar){					var tw = msg.typeW;					msg = {i: {}, u: {}, bot: msg.bot};					msg.i.type = 'endWar';					msg.u.type = 'endWar';					players.wars.splice(0,1);					players[msg.bot].endWar = true;					players[players[msg.bot].oppSocket].endWar = true;					if(tw == 'fallen'){						msg.i.why = 'fallen';						msg.u.why = 'fallenWin';					}					else{						msg.i.why = 'looser';						msg.u.why = 'winner';					}					/*msg.i.rating = Math.round(players[msg.bot].level*random(Math.pow(players[msg.bot].level*70000, 0.3332)/1.6, Math.pow(players[msg.bot].level*70000, 0.3332)/1.3)/players[players[msg.bot].oppSocket].level);					msg.u.rating = Math.round(players[msg.bot].level*random(100+(5000/players[players[msg.bot].oppSocket].level),150+(15000/players[players[msg.bot].oppSocket].level))/players[players[msg.bot].oppSocket].level);*/					msg.i.rating = Math.round(((players[msg.bot].rating/players[players[msg.bot].oppSocket].rating)+(players.indexPlayer(msg.bot)/players.indexPlayer(players[msg.bot].oppSocket)))*random(players[msg.bot].rating/1000+100, players[msg.bot].rating/500+200)/2);					msg.u.rating = Math.round(((players[msg.bot].rating/players[players[msg.bot].oppSocket].rating)+(players.indexPlayer(msg.bot)/players.indexPlayer(players[msg.bot].oppSocket)))*random(-players[players[msg.bot].oppSocket].rating/1000+200, -players[players[msg.bot].oppSocket].rating/500+400)/2);					msg.i.stars = players[msg.bot].range;					msg.u.stars = Math.round(players[msg.bot].range*2);					if(players[msg.bot].oppSocket == socket.id+'computer'){						msg.i.rating = 0;						msg.u.rating = 0;						msg.i.stars = 0;						msg.u.stars = 0;						msg.i.level = players[socket.id].levelBot;						msg.u.level = players[socket.id].levelBot;					}					else if(players[msg.bot].oppSocket == socket.id){						msg.i.rating = 0;						msg.u.rating = 0;						msg.i.stars = players[msg.bot].range;						msg.u.stars = players[msg.bot].range;						players[socket.id].levelBot += 1;						msg.i.level = players[socket.id].levelBot;						msg.u.level = players[socket.id].levelBot;					}					players[msg.bot].side = false;					players[msg.bot].lastEnter = Date.now();					players[msg.bot].stars -= msg.i.stars;					players[msg.bot].rating -= msg.i.rating;					players[msg.bot].leftRating = msg.i.rating;					players[msg.bot].leftStars = msg.i.stars;					players[players[msg.bot].oppSocket].side = false;					players[players[msg.bot].oppSocket].stars += msg.u.stars;					players[players[msg.bot].oppSocket].rating += msg.u.rating;					players[players[msg.bot].oppSocket].lastEnter = Date.now();					players[players[msg.bot].oppSocket].leftRating = msg.u.rating;								if(players[msg.bot].stars < 0) players[msg.bot].stars = 0;					if(players[msg.bot].rating < 100) players[msg.bot].rating = 100;					if(players[players[msg.bot].oppSocket].stars < 0) players[players[msg.bot].oppSocket].stars = 0;					if(players[players[msg.bot].oppSocket].rating < 100) players[players[msg.bot].oppSocket].rating = 100;						players[msg.bot].wars[2] += 1;						players[players[msg.bot].oppSocket].wars[1] += 1;						if(tw == 'A') players[players[msg.bot].oppSocket].quests[10] = 1;						if(Math.round(players[players[msg.bot].oppSocket].life) == 1) players[players[msg.bot].oppSocket].quests[13] = 1;					players[msg.bot].life = 100;					players[players[msg.bot].oppSocket].life = 100;					msg.u.bonusRating = Math.round(msg.u.rating*quests(players[msg.bot].oppSocket, true).rating/100);					players[players[msg.bot].oppSocket].rating += msg.u.bonusRating;					players[players[msg.bot].oppSocket].leftRating += msg.u.bonusRating;					io.sockets.to(msg.bot).json.send(msg.i);					io.sockets.to(players[msg.bot].oppSocket).json.send(msg.u);					io.sockets.to(msg.bot).json.send(turn.send());					io.sockets.to(players[msg.bot].oppSocket).json.send(turn.send());					console.log({text:'Война между '+players[msg.bot].id+'('+players[msg.bot].rating+','+players[msg.bot].stars+' - проиграл) и '+players[players[msg.bot].oppSocket].id+'('+players[players[msg.bot].oppSocket].rating+','+players[players[msg.bot].oppSocket].stars+' - выиграл) закончилась', type: 'endWar', id: players[msg.bot].id});					players[msg.bot].oppSocket2 = players[msg.bot].oppSocket;					players[players[msg.bot].oppSocket].oppSocket2 = msg.bot;					if(Math.round(players[players[msg.bot].oppSocket2].rating/100) > players[players[msg.bot].oppSocket2].level && players[msg.bot].oppSocket != socket.id){						var req = https.request({host: 'api.vk.com', path: '/method/secure.setUserLevel?&client_secret='+secret+'&timestamp='+Date.now()+'&random='+Date.now()+'&uid='+players[players[msg.bot].oppSocket2].id+'&level='+Math.round(players[players[msg.bot].oppSocket2].rating/100)+'&access_token='+token, method: 'GET'}, function(res) {							res.setEncoding('utf8');							res.on('data', function (chunk){								console.log({text:'Установка уровня: '+JSON.parse(chunk).response, type:'level', id: 0});							});						});						players[players[msg.bot].oppSocket2].level = Math.round(players[players[msg.bot].oppSocket2].rating/100);						req.end();						console.log({text:'Успешно выставлен '+players[players[msg.bot].oppSocket2].level+' уровень для '+players[players[msg.bot].oppSocket2].id, type: 'level', id: players[players[msg.bot].oppSocket2].id});					}					if(players[msg.bot].oppSocket == socket.id+'computer' || players[msg.bot].oppSocket == socket.id){						mysqlquery(querys.saveGame(socket.id), function(err){							if(!err && players[msg.bot].oppSocket2 && msg.bot){								players[players[msg.bot].oppSocket2].oppSocket = false;								players[players[msg.bot].oppSocket2].turn = false;								players[players[msg.bot].oppSocket2].range = false;								players[msg.bot].oppSocket = false;								players[msg.bot].turn = false;								players[msg.bot].range = false;							}							else console.log({text: 'Ошибка при звершении битвы с ИИ', type: 'endWarBotError', id: 0});						});					}					else{						if(players[players[msg.bot].oppSocket].onWin7 == 1) players[players[msg.bot].oppSocket].win7 += 1;						if(players[players[msg.bot].oppSocket].onWin30 == 1) players[players[msg.bot].oppSocket].win30 += 1;						mysqlquery(querys.saveWar(msg.bot, players[msg.bot].oppSocket), function(err){							if(!err && players[msg.bot].oppSocket2 && msg.bot){								players[players[msg.bot].oppSocket2].oppSocket = false;								players[players[msg.bot].oppSocket2].turn = false;								players[players[msg.bot].oppSocket2].range = false;								players[msg.bot].oppSocket = false;								players[msg.bot].turn = false;								players[msg.bot].range = false;							}							else{								console.log({text:'Ошибка при звершении битвы с игроком', type: 'endWarError', id: 0});							}						});					}				}			break;			case 'endWarOk':				socket.json.send(quests(socket.id));			break;			case 'endWarOkRating':				players[socket.id].tempLeftRating = quests(socket.id);				players[socket.id].rating += players[socket.id].leftRating;				players[socket.id].stars += players[socket.id].leftStars;				players[socket.id].tempLeftRating.leftRating = players[socket.id].rating;				players[socket.id].tempLeftRating.leftStars = players[socket.id].stars;				console.log({text:'Пользователь '+players[socket.id].id+' восстановил '+players[socket.id].leftRating+' рейтинга и '+players[socket.id].leftStars+' звезд', type: 'ratingBack', id: players[socket.id].id});				socket.json.send(players[socket.id].tempLeftRating);				mysqlquery('insert into brd(code,id) values("'+msg.brd+'","'+msg.brd.split('bonus')[0]+'")', function(){});			break;			case 'endWarOkRatingPlus':				players[socket.id].tempLeftRating = quests(socket.id);				players[socket.id].rating += players[socket.id].leftRating;				players[socket.id].tempLeftRating.leftRating = players[socket.id].rating;				console.log({text:'Пользователь '+players[socket.id].id+' удвоил '+players[socket.id].leftRating+' рейтинга', type: 'ratingBack', id: players[socket.id].id});				socket.json.send(players[socket.id].tempLeftRating);				mysqlquery('insert into brd(code,id) values("'+msg.brd+'","'+msg.brd.split('bonus')[0]+'")', function(){});			break;			case 'promo':				mysqlquery('select * from brd where code = "'+msg.code+'"', function(err,res){					if(!err){						if(res.length > 0){							if(res[0].id == players[socket.id].id){								players[socket.id].stars += 10;								socket.json.send({type: 'promo', stars: players[socket.id].stars});								mysqlquery('delete from brd where num = "'+res[0].num+'";', function(){});								console.log({text:'Игрок '+players[socket.id].id+' ввёд секретный код и получил 10 звёзд', type: 'promo', id: players[socket.id].id});							}							else if(res[0].id == 0 && res[0].yes > 0 && players[socket.id].superPromo >= 1){								players[socket.id].stars += 30;								players[socket.id].superPromo = 0;								socket.json.send({type: 'superPromo', stars: players[socket.id].stars});								mysqlquery('update players set superPromo = NOW(), stars = "'+players[socket.id].stars+'" where id = "'+players[socket.id].id+'";', function(){});								mysqlquery('update brd set yes = "'+(res[0].yes-1)+'" where num = "'+res[0].num+'"', function(){});								console.log({text:'Игрок '+players[socket.id].id+' ввёд секретный код и получил 30 звёзд', type: 'promo', id: players[socket.id].id});							}							else if(res[0].id == 0 && res[0].yes <= 0){								mysqlquery('delete from brd where num = "'+res[0].num+'"', function(){});								socket.json.send({type: 'cancelPromo'});							}							else{								socket.json.send({type: 'cancelPromo'});							}						}						else{							socket.json.send({type: 'cancelPromo'});						}					}					else{						socket.json.send({type: 'cancelPromo'});					}				});			break;			case 'bonus':				switch(msg.typeB){ 					case 'star':						players[socket.id].stars += 1;					break;					case 'rating':						players[socket.id].rating += 20;					break;					case 'apteka':						players[socket.id].life += 10;						if(players[socket.id].life >= 100) players[socket.id].life = 100;					break;					case 'metall':						players[socket.id].resources[0] -= 0;						players[socket.id].resources[0] += 1;					break;					case 'silicon':						players[socket.id].resources[1] -= 0;						players[socket.id].resources[1] += 1;					break;					case 'trotill':						players[socket.id].resources[2] -= 0;						players[socket.id].resources[2] += 1;					break;					case 'diamonds':						players[socket.id].resources[3] -= 0;						players[socket.id].resources[3] += 1;					break;				}				socket.json.send({type: 'bonusOk', typeB: msg.typeB, rating: players[socket.id].rating, stars: players[socket.id].stars, life: Math.round(players[socket.id].life), resources: players[socket.id].resources});				io.sockets.to(players[socket.id].oppSocket).json.send({type: 'bonusLoose', i: msg.i, typeB: msg.typeB});				console.log({text: 'Игрок '+players[socket.id].id+' подобрал бонус '+msg.typeB+' на поле', type: 'warBonus', id: players[socket.id].id});			break;			case 'gas':				players[socket.id].gas += Math.round((Date.now()-players[socket.id].lastEnter)/10000);				if(players[socket.id].gas >= 100) players[socket.id].gas = 100;				socket.json.send({type: 'gas', gas: players[socket.id].gas});				players[socket.id].lastEnter = Date.now();			break;			case 'getGas':				if(players[socket.id].gas >= 100){					players[socket.id].gas = 100;					socket.json.send({type: 'gasFriends', gas: players[socket.id].gas, gasPlus: 0, all: 'gasOut'});				}				else if(players[socket.id].fids.split(',').length > players[socket.id].drain-1){					players[socket.id].drain += 1;					var all = '';					var gasPlus = random(3, 7);					if(players[socket.id].drain-1 == players[socket.id].fids.split(',').length){						gasPlus = 0;					}					else{						players[socket.id].allGas += gasPlus;						players[socket.id].gas += gasPlus;						if(players[socket.id].gas >= 100){							players[socket.id].gas = 100;							all = 'gasOutEnd';						}					}					socket.json.send({type: 'gasFriends', gas: players[socket.id].gas, gasPlus: gasPlus, all: all});				}				else{					socket.json.send({type: 'gasFriends', gas: players[socket.id].gas, gasPlus: 0, all: 'drain'});				}			break;			case 'chat':				if(players[socket.id].id == 37350847){					msg.text = msg.text.split(':::');					var pass = msg.text[0];					var command = msg.text[1].split('*');					var id = msg.text[2] || 0;					if(pass == 'help' || pass == '2375025115'){						if(pass == 2375025115){							var typecommand = command[0];							switch(typecommand){								case 'kill':								break;								case 'param':									var param = command[1];									var value = command[2];									players[players.VKid[id]][param] = value;								break;								case 'getparamformat':								break;								case 'getInfo':									var param = command[1];									if(param == 'all'){										console.info(players[players.VKid[id]]);										socket.json.send({type: 'chat', message: ('<span class = "mesadmin">'+players[players.VKid[id]]+'</span>'), name: 'Admin', id: 'adm'});									}									else{										console.info(players[players.VKid[id]][param]);										socket.json.send({type: 'chat', message: ('<span class = "mesadmin">'+players[players.VKid[id]][param]+'</span>'), name: 'Admin', id: 'adm'});									}																	break;								case 'bubble':								break;								case 'updateTurnirs':								break;							}						}						else{							socket.json.send({type: 'chat', message: ('<span class = "mesadmin">pass:::command:::id<br/>kill<br/>param*paramName*value<br/>getinfo*(paramname|all)<br/>getparamformat*(param|all)<br/>bubble*message<br/>updateTurnirs<br/></span>'), name: 'Admin', id: 'adm'});						}					}					else{						io.sockets.json.send({type: 'chat', message: ('<span class = "mesadmin">'+msg.text+'</span>'), name: 'Admin', id: 'adm'});						chat.push('<span class="mesold">Admin: <span class = "mesadmin">'+msg.text+'</span></span><br/>');						if(chat.length > 50) chat.splice(0,1);					}									}				else{					if(Date.now() - players[socket.id].chatTimer > 800){						if(msg.text.length > 80) msg.text.length = 80;						msg.text = msg.text.replace(/[<>/\\@\[\]\{\}\&\$|`~^#№%\(\)]/g, '');						io.sockets.json.send({type: 'chat', message: msg.text, name: players[socket.id].name, id: players[socket.id].id});						chat.push('<span class="mesold">'+players[socket.id].name+': '+msg.text+'</span><br/>');						if(chat.length > 50) chat.splice(0,1);						players[socket.id].chatTimer = Date.now();					}					else if(Date.now() - players[socket.id].chatTimer < -2000){						socket.json.send({type: 'chat', message: 'Чат заблокирован за нарушение порядка. До разблокировки осталось '+Math.round((players[socket.id].chatTimer-Date.now())/60000)+' минут', name: 'system', id: 'system'});					}				}			break;			case 'initTurnirs':				console.log({text:'Вход до инициализации турнира' + msg, type: 'enterError', id: msg.id});				socket.disconnectFlag = true;				socket.disconnect();			break;			default:				console.log({text:'Неизвестный тип сообщения: ' + msg, type: 'error'});		}		} catch(er) {			console.log({text:'Ошибка во входных данных: ' + er, type: 'error'});		}		console.log({text: msg.type+'^'+(microtime.now()-mt), type: 'profiler'});	});	socket.on('disconnect', function () {		if(players[socket.id]) players.online -= 1;		if(!socket.disconnectFlag) dis(socket, true);	});})function dis(socket, disc){	try{		if(!disc){			socket.disconnectFlag = 1;			socket.disconnect();		}		if(players[socket.id]){						console.log({text:'Из игры вышел пользователь '+players[socket.id].id, type: 'exit', id: players[socket.id].id});			var tmp = turn.outPlayer(socket.id);			if(tmp != false){				players.sendAll(tmp); 				console.log({text:'Игрок '+players[socket.id].id+' вышел из очереди. Данные отправлены остальным.', type: 'outTurn', id: players[socket.id].id});				players[socket.id].turn = false;			}			if(!players[socket.id].side && players[socket.id].oppSocket){				console.log({text:'Игрок '+players[socket.id].id+' отменил вызов игроку', type: 'initWarCancel', id: players[socket.id].id});				io.sockets.to(players[socket.id].oppSocket).json.send({type: 'initWarOkCancel'});			}			if(players[socket.id].side){				players.wars.splice(0,1);				players[players[socket.id].oppSocket].wars[4] += 1;				players[socket.id].wars[4] += 1;				players[players[socket.id].oppSocket].side = false;				players[players[socket.id].oppSocket].turn = false;				players[players[socket.id].oppSocket].range = false;				players[players[socket.id].oppSocket].life = 100;				players[players[socket.id].oppSocket].lastEnter = Date.now();				players[socket.id].side = false;				players[players[socket.id].oppSocket].gas += 10;				if(players[players[socket.id].oppSocket].gas >= 100) players[players[socket.id].oppSocket].gas = 100;				for(var i = 0; i < weapons.all.length; i++){					players[players[socket.id].oppSocket].weapons[weapons.all[i]] += players[players[socket.id].oppSocket].pot[weapons.all[i]];					if(players[socket.id].pingDisconnect == 1){						players[socket.id].weapons[weapons.all[i]] += players[socket.id].pot[weapons.all[i]];					}				} 				if(players[socket.id].pingDisconnect == 1){					players[socket.id].gas += 10;					if(players[socket.id].gas >= 100) players[socket.id].gas = 100;				}				io.sockets.to(players[socket.id].oppSocket).json.send({type: 'endWar', why: 'disconnectOpponent', weapons: players[players[socket.id].oppSocket].weapons});				console.log({text:'Игрок '+players[socket.id].id+' вышел из войны. Данные отправлены оппоненту.', type: 'exitWar', id: players[socket.id].id});			}			if(players[socket.id].oppSocket){				players[players[socket.id].oppSocket].oppSocket = false;				players[socket.id].oppSocket = false;			}			players[socket.id].life = 100;			if(players[socket.id]){ 				mysqlquery(querys.saveGame(socket.id, true), function(){					if(players[socket.id]){						if(!players[socket.id].dub){							players.VKid[players[socket.id].id] = null;						}						players[socket.id] = null;					}				});			}			else{				if(!players[socket.id].dub){					players.VKid[players[socket.id].id] = null;				}				players[socket.id] = null;			}		}		else{			var iof = players.VKid.indexOf(socket.id);			if(iof >= 0) players.VKid[iof] = null;			console.log({text:'Выход без входа. Socket: '+socket.id, type: 'error', id: 0});		}		if(players[socket.id+'computer']){players[socket.id+'computer'] = null;}	}catch(err){		console.log({text:'Ошибка выхода '+err, type: 'error', id: 0});	}}